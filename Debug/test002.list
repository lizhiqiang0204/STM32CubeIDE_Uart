
test002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004124  08004124  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004124  08004124  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b8  20000074  080041a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000312c  080041a0  0002312c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f06c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000285f  00000000  00000000  0002f109  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  00032608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f7a  00000000  00000000  00033180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aab7  00000000  00000000  0004b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081cb4  00000000  00000000  00055bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  000d78e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08004000 	.word	0x08004000

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08004000 	.word	0x08004000

08000230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <HAL_Init+0x28>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <HAL_Init+0x28>)
 800023a:	f043 0310 	orr.w	r3, r3, #16
 800023e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000240:	2003      	movs	r0, #3
 8000242:	f000 f923 	bl	800048c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000246:	200f      	movs	r0, #15
 8000248:	f000 f808 	bl	800025c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800024c:	f003 f886 	bl	800335c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40022000 	.word	0x40022000

0800025c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <HAL_InitTick+0x54>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <HAL_InitTick+0x58>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000272:	fbb3 f3f1 	udiv	r3, r3, r1
 8000276:	fbb2 f3f3 	udiv	r3, r2, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f93b 	bl	80004f6 <HAL_SYSTICK_Config>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000286:	2301      	movs	r3, #1
 8000288:	e00e      	b.n	80002a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b0f      	cmp	r3, #15
 800028e:	d80a      	bhi.n	80002a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000290:	2200      	movs	r2, #0
 8000292:	6879      	ldr	r1, [r7, #4]
 8000294:	f04f 30ff 	mov.w	r0, #4294967295
 8000298:	f000 f903 	bl	80004a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_InitTick+0x5c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002a2:	2300      	movs	r3, #0
 80002a4:	e000      	b.n	80002a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002a6:	2301      	movs	r3, #1
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	20000004 	.word	0x20000004
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <HAL_IncTick+0x20>)
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	20000004 	.word	0x20000004
 80002dc:	200029ec 	.word	0x200029ec

080002e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b02      	ldr	r3, [pc, #8]	; (80002f0 <HAL_GetTick+0x10>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	200029ec 	.word	0x200029ec

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4906      	ldr	r1, [pc, #24]	; (800038c <__NVIC_EnableIRQ+0x34>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	e000e100 	.word	0xe000e100

08000390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	db0a      	blt.n	80003ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	490c      	ldr	r1, [pc, #48]	; (80003dc <__NVIC_SetPriority+0x4c>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	0112      	lsls	r2, r2, #4
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	440b      	add	r3, r1
 80003b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003b8:	e00a      	b.n	80003d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4908      	ldr	r1, [pc, #32]	; (80003e0 <__NVIC_SetPriority+0x50>)
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f003 030f 	and.w	r3, r3, #15
 80003c6:	3b04      	subs	r3, #4
 80003c8:	0112      	lsls	r2, r2, #4
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	440b      	add	r3, r1
 80003ce:	761a      	strb	r2, [r3, #24]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000e100 	.word	0xe000e100
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	f1c3 0307 	rsb	r3, r3, #7
 80003fe:	2b04      	cmp	r3, #4
 8000400:	bf28      	it	cs
 8000402:	2304      	movcs	r3, #4
 8000404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	3304      	adds	r3, #4
 800040a:	2b06      	cmp	r3, #6
 800040c:	d902      	bls.n	8000414 <NVIC_EncodePriority+0x30>
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3b03      	subs	r3, #3
 8000412:	e000      	b.n	8000416 <NVIC_EncodePriority+0x32>
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	f04f 32ff 	mov.w	r2, #4294967295
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	43da      	mvns	r2, r3
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	401a      	ands	r2, r3
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800042c:	f04f 31ff 	mov.w	r1, #4294967295
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	43d9      	mvns	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800043c:	4313      	orrs	r3, r2
         );
}
 800043e:	4618      	mov	r0, r3
 8000440:	3724      	adds	r7, #36	; 0x24
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3b01      	subs	r3, #1
 8000454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000458:	d301      	bcc.n	800045e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800045a:	2301      	movs	r3, #1
 800045c:	e00f      	b.n	800047e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <SysTick_Config+0x40>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000466:	210f      	movs	r1, #15
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f7ff ff90 	bl	8000390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Config+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SysTick_Config+0x40>)
 8000478:	2207      	movs	r2, #7
 800047a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	e000e010 	.word	0xe000e010

0800048c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff2d 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004b4:	f7ff ff42 	bl	800033c <__NVIC_GetPriorityGrouping>
 80004b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	6978      	ldr	r0, [r7, #20]
 80004c0:	f7ff ff90 	bl	80003e4 <NVIC_EncodePriority>
 80004c4:	4602      	mov	r2, r0
 80004c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff5f 	bl	8000390 <__NVIC_SetPriority>
}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff35 	bl	8000358 <__NVIC_EnableIRQ>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff ffa2 	bl	8000448 <SysTick_Config>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000522:	2b02      	cmp	r3, #2
 8000524:	d005      	beq.n	8000532 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2204      	movs	r2, #4
 800052a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e0d6      	b.n	80006e0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f022 020e 	bic.w	r2, r2, #14
 8000540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f022 0201 	bic.w	r2, r2, #1
 8000550:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b64      	ldr	r3, [pc, #400]	; (80006ec <HAL_DMA_Abort_IT+0x1dc>)
 800055a:	429a      	cmp	r2, r3
 800055c:	d958      	bls.n	8000610 <HAL_DMA_Abort_IT+0x100>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a63      	ldr	r2, [pc, #396]	; (80006f0 <HAL_DMA_Abort_IT+0x1e0>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d04f      	beq.n	8000608 <HAL_DMA_Abort_IT+0xf8>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a61      	ldr	r2, [pc, #388]	; (80006f4 <HAL_DMA_Abort_IT+0x1e4>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d048      	beq.n	8000604 <HAL_DMA_Abort_IT+0xf4>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a60      	ldr	r2, [pc, #384]	; (80006f8 <HAL_DMA_Abort_IT+0x1e8>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d040      	beq.n	80005fe <HAL_DMA_Abort_IT+0xee>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a5e      	ldr	r2, [pc, #376]	; (80006fc <HAL_DMA_Abort_IT+0x1ec>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d038      	beq.n	80005f8 <HAL_DMA_Abort_IT+0xe8>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a5d      	ldr	r2, [pc, #372]	; (8000700 <HAL_DMA_Abort_IT+0x1f0>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d030      	beq.n	80005f2 <HAL_DMA_Abort_IT+0xe2>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a5b      	ldr	r2, [pc, #364]	; (8000704 <HAL_DMA_Abort_IT+0x1f4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d028      	beq.n	80005ec <HAL_DMA_Abort_IT+0xdc>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a53      	ldr	r2, [pc, #332]	; (80006ec <HAL_DMA_Abort_IT+0x1dc>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d020      	beq.n	80005e6 <HAL_DMA_Abort_IT+0xd6>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a57      	ldr	r2, [pc, #348]	; (8000708 <HAL_DMA_Abort_IT+0x1f8>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d019      	beq.n	80005e2 <HAL_DMA_Abort_IT+0xd2>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a56      	ldr	r2, [pc, #344]	; (800070c <HAL_DMA_Abort_IT+0x1fc>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d012      	beq.n	80005de <HAL_DMA_Abort_IT+0xce>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a54      	ldr	r2, [pc, #336]	; (8000710 <HAL_DMA_Abort_IT+0x200>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d00a      	beq.n	80005d8 <HAL_DMA_Abort_IT+0xc8>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a53      	ldr	r2, [pc, #332]	; (8000714 <HAL_DMA_Abort_IT+0x204>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d102      	bne.n	80005d2 <HAL_DMA_Abort_IT+0xc2>
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	e01b      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	e018      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005dc:	e015      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005de:	2310      	movs	r3, #16
 80005e0:	e013      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e011      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005ea:	e00e      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005f0:	e00b      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	e008      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	e005      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 80005fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000602:	e002      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 8000604:	2310      	movs	r3, #16
 8000606:	e000      	b.n	800060a <HAL_DMA_Abort_IT+0xfa>
 8000608:	2301      	movs	r3, #1
 800060a:	4a43      	ldr	r2, [pc, #268]	; (8000718 <HAL_DMA_Abort_IT+0x208>)
 800060c:	6053      	str	r3, [r2, #4]
 800060e:	e057      	b.n	80006c0 <HAL_DMA_Abort_IT+0x1b0>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a36      	ldr	r2, [pc, #216]	; (80006f0 <HAL_DMA_Abort_IT+0x1e0>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d04f      	beq.n	80006ba <HAL_DMA_Abort_IT+0x1aa>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a35      	ldr	r2, [pc, #212]	; (80006f4 <HAL_DMA_Abort_IT+0x1e4>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d048      	beq.n	80006b6 <HAL_DMA_Abort_IT+0x1a6>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <HAL_DMA_Abort_IT+0x1e8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d040      	beq.n	80006b0 <HAL_DMA_Abort_IT+0x1a0>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a32      	ldr	r2, [pc, #200]	; (80006fc <HAL_DMA_Abort_IT+0x1ec>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d038      	beq.n	80006aa <HAL_DMA_Abort_IT+0x19a>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a30      	ldr	r2, [pc, #192]	; (8000700 <HAL_DMA_Abort_IT+0x1f0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d030      	beq.n	80006a4 <HAL_DMA_Abort_IT+0x194>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <HAL_DMA_Abort_IT+0x1f4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d028      	beq.n	800069e <HAL_DMA_Abort_IT+0x18e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <HAL_DMA_Abort_IT+0x1dc>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d020      	beq.n	8000698 <HAL_DMA_Abort_IT+0x188>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a2b      	ldr	r2, [pc, #172]	; (8000708 <HAL_DMA_Abort_IT+0x1f8>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d019      	beq.n	8000694 <HAL_DMA_Abort_IT+0x184>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <HAL_DMA_Abort_IT+0x1fc>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d012      	beq.n	8000690 <HAL_DMA_Abort_IT+0x180>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a28      	ldr	r2, [pc, #160]	; (8000710 <HAL_DMA_Abort_IT+0x200>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d00a      	beq.n	800068a <HAL_DMA_Abort_IT+0x17a>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <HAL_DMA_Abort_IT+0x204>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d102      	bne.n	8000684 <HAL_DMA_Abort_IT+0x174>
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	e01b      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	e018      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 800068a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068e:	e015      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 8000690:	2310      	movs	r3, #16
 8000692:	e013      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 8000694:	2301      	movs	r3, #1
 8000696:	e011      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 8000698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800069c:	e00e      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 800069e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006a2:	e00b      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	e008      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	e005      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	e002      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 80006b6:	2310      	movs	r3, #16
 80006b8:	e000      	b.n	80006bc <HAL_DMA_Abort_IT+0x1ac>
 80006ba:	2301      	movs	r3, #1
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_DMA_Abort_IT+0x20c>)
 80006be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	4798      	blx	r3
    } 
  }
  return status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40020080 	.word	0x40020080
 80006f0:	40020008 	.word	0x40020008
 80006f4:	4002001c 	.word	0x4002001c
 80006f8:	40020030 	.word	0x40020030
 80006fc:	40020044 	.word	0x40020044
 8000700:	40020058 	.word	0x40020058
 8000704:	4002006c 	.word	0x4002006c
 8000708:	40020408 	.word	0x40020408
 800070c:	4002041c 	.word	0x4002041c
 8000710:	40020430 	.word	0x40020430
 8000714:	40020444 	.word	0x40020444
 8000718:	40020400 	.word	0x40020400
 800071c:	40020000 	.word	0x40020000

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	b480      	push	{r7}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000732:	e133      	b.n	800099c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000734:	2201      	movs	r2, #1
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	4013      	ands	r3, r2
 8000746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	429a      	cmp	r2, r3
 800074e:	f040 8122 	bne.w	8000996 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b12      	cmp	r3, #18
 8000758:	d034      	beq.n	80007c4 <HAL_GPIO_Init+0xa4>
 800075a:	2b12      	cmp	r3, #18
 800075c:	d80d      	bhi.n	800077a <HAL_GPIO_Init+0x5a>
 800075e:	2b02      	cmp	r3, #2
 8000760:	d02b      	beq.n	80007ba <HAL_GPIO_Init+0x9a>
 8000762:	2b02      	cmp	r3, #2
 8000764:	d804      	bhi.n	8000770 <HAL_GPIO_Init+0x50>
 8000766:	2b00      	cmp	r3, #0
 8000768:	d031      	beq.n	80007ce <HAL_GPIO_Init+0xae>
 800076a:	2b01      	cmp	r3, #1
 800076c:	d01c      	beq.n	80007a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800076e:	e048      	b.n	8000802 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000770:	2b03      	cmp	r3, #3
 8000772:	d043      	beq.n	80007fc <HAL_GPIO_Init+0xdc>
 8000774:	2b11      	cmp	r3, #17
 8000776:	d01b      	beq.n	80007b0 <HAL_GPIO_Init+0x90>
          break;
 8000778:	e043      	b.n	8000802 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800077a:	4a8f      	ldr	r2, [pc, #572]	; (80009b8 <HAL_GPIO_Init+0x298>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d026      	beq.n	80007ce <HAL_GPIO_Init+0xae>
 8000780:	4a8d      	ldr	r2, [pc, #564]	; (80009b8 <HAL_GPIO_Init+0x298>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d806      	bhi.n	8000794 <HAL_GPIO_Init+0x74>
 8000786:	4a8d      	ldr	r2, [pc, #564]	; (80009bc <HAL_GPIO_Init+0x29c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d020      	beq.n	80007ce <HAL_GPIO_Init+0xae>
 800078c:	4a8c      	ldr	r2, [pc, #560]	; (80009c0 <HAL_GPIO_Init+0x2a0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d01d      	beq.n	80007ce <HAL_GPIO_Init+0xae>
          break;
 8000792:	e036      	b.n	8000802 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000794:	4a8b      	ldr	r2, [pc, #556]	; (80009c4 <HAL_GPIO_Init+0x2a4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d019      	beq.n	80007ce <HAL_GPIO_Init+0xae>
 800079a:	4a8b      	ldr	r2, [pc, #556]	; (80009c8 <HAL_GPIO_Init+0x2a8>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d016      	beq.n	80007ce <HAL_GPIO_Init+0xae>
 80007a0:	4a8a      	ldr	r2, [pc, #552]	; (80009cc <HAL_GPIO_Init+0x2ac>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d013      	beq.n	80007ce <HAL_GPIO_Init+0xae>
          break;
 80007a6:	e02c      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	623b      	str	r3, [r7, #32]
          break;
 80007ae:	e028      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	3304      	adds	r3, #4
 80007b6:	623b      	str	r3, [r7, #32]
          break;
 80007b8:	e023      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	3308      	adds	r3, #8
 80007c0:	623b      	str	r3, [r7, #32]
          break;
 80007c2:	e01e      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	330c      	adds	r3, #12
 80007ca:	623b      	str	r3, [r7, #32]
          break;
 80007cc:	e019      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d102      	bne.n	80007dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007d6:	2304      	movs	r3, #4
 80007d8:	623b      	str	r3, [r7, #32]
          break;
 80007da:	e012      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d105      	bne.n	80007f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e4:	2308      	movs	r3, #8
 80007e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	611a      	str	r2, [r3, #16]
          break;
 80007ee:	e008      	b.n	8000802 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f0:	2308      	movs	r3, #8
 80007f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	615a      	str	r2, [r3, #20]
          break;
 80007fa:	e002      	b.n	8000802 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
          break;
 8000800:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2bff      	cmp	r3, #255	; 0xff
 8000806:	d801      	bhi.n	800080c <HAL_GPIO_Init+0xec>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	e001      	b.n	8000810 <HAL_GPIO_Init+0xf0>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3304      	adds	r3, #4
 8000810:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	d802      	bhi.n	800081e <HAL_GPIO_Init+0xfe>
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	e002      	b.n	8000824 <HAL_GPIO_Init+0x104>
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	3b08      	subs	r3, #8
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	210f      	movs	r1, #15
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	401a      	ands	r2, r3
 8000836:	6a39      	ldr	r1, [r7, #32]
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	431a      	orrs	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 80a2 	beq.w	8000996 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000852:	4b5f      	ldr	r3, [pc, #380]	; (80009d0 <HAL_GPIO_Init+0x2b0>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a5e      	ldr	r2, [pc, #376]	; (80009d0 <HAL_GPIO_Init+0x2b0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <HAL_GPIO_Init+0x2b0>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800086a:	4a5a      	ldr	r2, [pc, #360]	; (80009d4 <HAL_GPIO_Init+0x2b4>)
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	3302      	adds	r3, #2
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	220f      	movs	r2, #15
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4013      	ands	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a51      	ldr	r2, [pc, #324]	; (80009d8 <HAL_GPIO_Init+0x2b8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d01f      	beq.n	80008d6 <HAL_GPIO_Init+0x1b6>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a50      	ldr	r2, [pc, #320]	; (80009dc <HAL_GPIO_Init+0x2bc>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d019      	beq.n	80008d2 <HAL_GPIO_Init+0x1b2>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4f      	ldr	r2, [pc, #316]	; (80009e0 <HAL_GPIO_Init+0x2c0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d013      	beq.n	80008ce <HAL_GPIO_Init+0x1ae>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a4e      	ldr	r2, [pc, #312]	; (80009e4 <HAL_GPIO_Init+0x2c4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d00d      	beq.n	80008ca <HAL_GPIO_Init+0x1aa>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <HAL_GPIO_Init+0x2c8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d007      	beq.n	80008c6 <HAL_GPIO_Init+0x1a6>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <HAL_GPIO_Init+0x2cc>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_GPIO_Init+0x1a2>
 80008be:	2305      	movs	r3, #5
 80008c0:	e00a      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008c2:	2306      	movs	r3, #6
 80008c4:	e008      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008c6:	2304      	movs	r3, #4
 80008c8:	e006      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008ca:	2303      	movs	r3, #3
 80008cc:	e004      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008ce:	2302      	movs	r3, #2
 80008d0:	e002      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008d2:	2301      	movs	r3, #1
 80008d4:	e000      	b.n	80008d8 <HAL_GPIO_Init+0x1b8>
 80008d6:	2300      	movs	r3, #0
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	f002 0203 	and.w	r2, r2, #3
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	4093      	lsls	r3, r2
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008e8:	493a      	ldr	r1, [pc, #232]	; (80009d4 <HAL_GPIO_Init+0x2b4>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	3302      	adds	r3, #2
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	493a      	ldr	r1, [pc, #232]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
 800090e:	e006      	b.n	800091e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	43db      	mvns	r3, r3
 8000918:	4935      	ldr	r1, [pc, #212]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800091a:	4013      	ands	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	4930      	ldr	r1, [pc, #192]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	604b      	str	r3, [r1, #4]
 8000936:	e006      	b.n	8000946 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	43db      	mvns	r3, r3
 8000940:	492b      	ldr	r1, [pc, #172]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000942:	4013      	ands	r3, r2
 8000944:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	4926      	ldr	r1, [pc, #152]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	608b      	str	r3, [r1, #8]
 800095e:	e006      	b.n	800096e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	43db      	mvns	r3, r3
 8000968:	4921      	ldr	r1, [pc, #132]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800096a:	4013      	ands	r3, r2
 800096c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800097c:	68da      	ldr	r2, [r3, #12]
 800097e:	491c      	ldr	r1, [pc, #112]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	60cb      	str	r3, [r1, #12]
 8000986:	e006      	b.n	8000996 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	43db      	mvns	r3, r3
 8000990:	4917      	ldr	r1, [pc, #92]	; (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000992:	4013      	ands	r3, r2
 8000994:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3301      	adds	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	fa22 f303 	lsr.w	r3, r2, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f47f aec4 	bne.w	8000734 <HAL_GPIO_Init+0x14>
  }
}
 80009ac:	bf00      	nop
 80009ae:	372c      	adds	r7, #44	; 0x2c
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	10210000 	.word	0x10210000
 80009bc:	10110000 	.word	0x10110000
 80009c0:	10120000 	.word	0x10120000
 80009c4:	10310000 	.word	0x10310000
 80009c8:	10320000 	.word	0x10320000
 80009cc:	10220000 	.word	0x10220000
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000
 80009d8:	40010800 	.word	0x40010800
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	40011000 	.word	0x40011000
 80009e4:	40011400 	.word	0x40011400
 80009e8:	40011800 	.word	0x40011800
 80009ec:	40011c00 	.word	0x40011c00
 80009f0:	40010400 	.word	0x40010400

080009f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
 8000a00:	4613      	mov	r3, r2
 8000a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a04:	787b      	ldrb	r3, [r7, #1]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a0a:	887a      	ldrh	r2, [r7, #2]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a10:	e003      	b.n	8000a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	041a      	lsls	r2, r3, #16
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	611a      	str	r2, [r3, #16]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e26c      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8087 	beq.w	8000b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a44:	4b92      	ldr	r3, [pc, #584]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d00c      	beq.n	8000a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a50:	4b8f      	ldr	r3, [pc, #572]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d112      	bne.n	8000a82 <HAL_RCC_OscConfig+0x5e>
 8000a5c:	4b8c      	ldr	r3, [pc, #560]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a68:	d10b      	bne.n	8000a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6a:	4b89      	ldr	r3, [pc, #548]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d06c      	beq.n	8000b50 <HAL_RCC_OscConfig+0x12c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d168      	bne.n	8000b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e246      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a8a:	d106      	bne.n	8000a9a <HAL_RCC_OscConfig+0x76>
 8000a8c:	4b80      	ldr	r3, [pc, #512]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a7f      	ldr	r2, [pc, #508]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e02e      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x98>
 8000aa2:	4b7b      	ldr	r3, [pc, #492]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a7a      	ldr	r2, [pc, #488]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a77      	ldr	r2, [pc, #476]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e01d      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_RCC_OscConfig+0xbc>
 8000ac6:	4b72      	ldr	r3, [pc, #456]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a71      	ldr	r2, [pc, #452]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a6e      	ldr	r2, [pc, #440]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e00b      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000ae0:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a6a      	ldr	r2, [pc, #424]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b68      	ldr	r3, [pc, #416]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a67      	ldr	r2, [pc, #412]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d013      	beq.n	8000b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fbee 	bl	80002e0 <HAL_GetTick>
 8000b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b06:	e008      	b.n	8000b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b08:	f7ff fbea 	bl	80002e0 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b64      	cmp	r3, #100	; 0x64
 8000b14:	d901      	bls.n	8000b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e1fa      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f0      	beq.n	8000b08 <HAL_RCC_OscConfig+0xe4>
 8000b26:	e014      	b.n	8000b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b28:	f7ff fbda 	bl	80002e0 <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2e:	e008      	b.n	8000b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b30:	f7ff fbd6 	bl	80002e0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b64      	cmp	r3, #100	; 0x64
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e1e6      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b42:	4b53      	ldr	r3, [pc, #332]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f0      	bne.n	8000b30 <HAL_RCC_OscConfig+0x10c>
 8000b4e:	e000      	b.n	8000b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d063      	beq.n	8000c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b5e:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d11c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x18c>
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d116      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <HAL_RCC_OscConfig+0x176>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d001      	beq.n	8000b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e1ba      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4939      	ldr	r1, [pc, #228]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bae:	e03a      	b.n	8000c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d020      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_RCC_OscConfig+0x270>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fb8f 	bl	80002e0 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fb8b 	bl	80002e0 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e19b      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f0      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4927      	ldr	r1, [pc, #156]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
 8000bf8:	e015      	b.n	8000c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_RCC_OscConfig+0x270>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fb6e 	bl	80002e0 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fb6a 	bl	80002e0 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e17a      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d03a      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d019      	beq.n	8000c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_RCC_OscConfig+0x274>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c40:	f7ff fb4e 	bl	80002e0 <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fb4a 	bl	80002e0 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e15a      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fada 	bl	8001220 <RCC_Delay>
 8000c6c:	e01c      	b.n	8000ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_RCC_OscConfig+0x274>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fb34 	bl	80002e0 <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c7a:	e00f      	b.n	8000c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fb30 	bl	80002e0 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d908      	bls.n	8000c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e140      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	42420000 	.word	0x42420000
 8000c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c9c:	4b9e      	ldr	r3, [pc, #632]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1e9      	bne.n	8000c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80a6 	beq.w	8000e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cba:	4b97      	ldr	r3, [pc, #604]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b94      	ldr	r3, [pc, #592]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce2:	4b8e      	ldr	r3, [pc, #568]	; (8000f1c <HAL_RCC_OscConfig+0x4f8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cee:	4b8b      	ldr	r3, [pc, #556]	; (8000f1c <HAL_RCC_OscConfig+0x4f8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a8a      	ldr	r2, [pc, #552]	; (8000f1c <HAL_RCC_OscConfig+0x4f8>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff faf1 	bl	80002e0 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d02:	f7ff faed 	bl	80002e0 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b64      	cmp	r3, #100	; 0x64
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e0fd      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <HAL_RCC_OscConfig+0x4f8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x312>
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a7a      	ldr	r2, [pc, #488]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6213      	str	r3, [r2, #32]
 8000d34:	e02d      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x334>
 8000d3e:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4a75      	ldr	r2, [pc, #468]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6213      	str	r3, [r2, #32]
 8000d4a:	4b73      	ldr	r3, [pc, #460]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a72      	ldr	r2, [pc, #456]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	6213      	str	r3, [r2, #32]
 8000d56:	e01c      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d10c      	bne.n	8000d7a <HAL_RCC_OscConfig+0x356>
 8000d60:	4b6d      	ldr	r3, [pc, #436]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4a6c      	ldr	r2, [pc, #432]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6213      	str	r3, [r2, #32]
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4a69      	ldr	r2, [pc, #420]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6213      	str	r3, [r2, #32]
 8000d78:	e00b      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	6213      	str	r3, [r2, #32]
 8000d86:	4b64      	ldr	r3, [pc, #400]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	4a63      	ldr	r2, [pc, #396]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000d8c:	f023 0304 	bic.w	r3, r3, #4
 8000d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d015      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9a:	f7ff faa1 	bl	80002e0 <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da0:	e00a      	b.n	8000db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da2:	f7ff fa9d 	bl	80002e0 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e0ab      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db8:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0ee      	beq.n	8000da2 <HAL_RCC_OscConfig+0x37e>
 8000dc4:	e014      	b.n	8000df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fa8b 	bl	80002e0 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dcc:	e00a      	b.n	8000de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fa87 	bl	80002e0 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e095      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de4:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ee      	bne.n	8000dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d105      	bne.n	8000e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8081 	beq.w	8000f0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d061      	beq.n	8000edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d146      	bne.n	8000eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <HAL_RCC_OscConfig+0x4fc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fa5b 	bl	80002e0 <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2e:	f7ff fa57 	bl	80002e0 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e067      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f0      	bne.n	8000e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e54:	d108      	bne.n	8000e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	492d      	ldr	r1, [pc, #180]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a19      	ldr	r1, [r3, #32]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	4927      	ldr	r1, [pc, #156]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_RCC_OscConfig+0x4fc>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fa2b 	bl	80002e0 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8e:	f7ff fa27 	bl	80002e0 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e037      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x46a>
 8000eac:	e02f      	b.n	8000f0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_RCC_OscConfig+0x4fc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fa14 	bl	80002e0 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ebc:	f7ff fa10 	bl	80002e0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e020      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x498>
 8000eda:	e018      	b.n	8000f0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e013      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	42420060 	.word	0x42420060

08000f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0d0      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d910      	bls.n	8000f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f46:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 0207 	bic.w	r2, r3, #7
 8000f4e:	4965      	ldr	r1, [pc, #404]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0b8      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d020      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f98:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d040      	beq.n	8001044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d115      	bne.n	8001002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e07f      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d107      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e073      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e06b      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f023 0203 	bic.w	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4936      	ldr	r1, [pc, #216]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001014:	f7ff f964 	bl	80002e0 <HAL_GetTick>
 8001018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101a:	e00a      	b.n	8001032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101c:	f7ff f960 	bl	80002e0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	f241 3288 	movw	r2, #5000	; 0x1388
 800102a:	4293      	cmp	r3, r2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e053      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 020c 	and.w	r2, r3, #12
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	429a      	cmp	r2, r3
 8001042:	d1eb      	bne.n	800101c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d210      	bcs.n	8001074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 0207 	bic.w	r2, r3, #7
 800105a:	4922      	ldr	r1, [pc, #136]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e032      	b.n	80010da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4916      	ldr	r1, [pc, #88]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	490e      	ldr	r1, [pc, #56]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010b2:	f000 f821 	bl	80010f8 <HAL_RCC_GetSysClockFreq>
 80010b6:	4601      	mov	r1, r0
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_RCC_ClockConfig+0x1c8>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_RCC_ClockConfig+0x1cc>)
 80010cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_RCC_ClockConfig+0x1d0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f8c2 	bl	800025c <HAL_InitTick>

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	080040a8 	.word	0x080040a8
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f8:	b490      	push	{r4, r7}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001100:	1d3c      	adds	r4, r7, #4
 8001102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b04      	cmp	r3, #4
 8001130:	d002      	beq.n	8001138 <HAL_RCC_GetSysClockFreq+0x40>
 8001132:	2b08      	cmp	r3, #8
 8001134:	d003      	beq.n	800113e <HAL_RCC_GetSysClockFreq+0x46>
 8001136:	e02d      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800113a:	623b      	str	r3, [r7, #32]
      break;
 800113c:	e02d      	b.n	800119a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800114a:	4413      	add	r3, r2
 800114c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001150:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	0c5b      	lsrs	r3, r3, #17
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800116a:	4413      	add	r3, r2
 800116c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001170:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001176:	fb02 f203 	mul.w	r2, r2, r3
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	e004      	b.n	800118e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	623b      	str	r3, [r7, #32]
      break;
 8001192:	e002      	b.n	800119a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001196:	623b      	str	r3, [r7, #32]
      break;
 8001198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800119a:	6a3b      	ldr	r3, [r7, #32]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc90      	pop	{r4, r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	08004018 	.word	0x08004018
 80011ac:	08004028 	.word	0x08004028
 80011b0:	40021000 	.word	0x40021000
 80011b4:	007a1200 	.word	0x007a1200
 80011b8:	003d0900 	.word	0x003d0900

080011bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_RCC_GetHCLKFreq+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	2000000c 	.word	0x2000000c

080011d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011d4:	f7ff fff2 	bl	80011bc <HAL_RCC_GetHCLKFreq>
 80011d8:	4601      	mov	r1, r0
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	0a1b      	lsrs	r3, r3, #8
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	080040b8 	.word	0x080040b8

080011f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011fc:	f7ff ffde 	bl	80011bc <HAL_RCC_GetHCLKFreq>
 8001200:	4601      	mov	r1, r0
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	0adb      	lsrs	r3, r3, #11
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_RCC_GetPCLK2Freq+0x24>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	080040b8 	.word	0x080040b8

08001220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <RCC_Delay+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <RCC_Delay+0x38>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0a5b      	lsrs	r3, r3, #9
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800123c:	bf00      	nop
  }
  while (Delay --);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	60fa      	str	r2, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <RCC_Delay+0x1c>
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c
 8001258:	10624dd3 	.word	0x10624dd3

0800125c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e03f      	b.n	80012ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f002 f8aa 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800129e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fb8d 	bl	80019c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b088      	sub	sp, #32
 80012fa:	af02      	add	r7, sp, #8
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4613      	mov	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	f040 8083 	bne.w	800141e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <HAL_UART_Transmit+0x2e>
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e07b      	b.n	8001420 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_UART_Transmit+0x40>
 8001332:	2302      	movs	r3, #2
 8001334:	e074      	b.n	8001420 <HAL_UART_Transmit+0x12a>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2221      	movs	r2, #33	; 0x21
 8001348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800134c:	f7fe ffc8 	bl	80002e0 <HAL_GetTick>
 8001350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800135e:	e042      	b.n	80013e6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001364:	b29b      	uxth	r3, r3
 8001366:	3b01      	subs	r3, #1
 8001368:	b29a      	uxth	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001376:	d122      	bne.n	80013be <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2200      	movs	r2, #0
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f9b2 	bl	80016ec <UART_WaitOnFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e046      	b.n	8001420 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3302      	adds	r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	e017      	b.n	80013e6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	e013      	b.n	80013e6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2200      	movs	r2, #0
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f98f 	bl	80016ec <UART_WaitOnFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e023      	b.n	8001420 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1b7      	bne.n	8001360 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2200      	movs	r2, #0
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f976 	bl	80016ec <UART_WaitOnFlagUntilTimeout>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e00a      	b.n	8001420 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800141e:	2302      	movs	r3, #2
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b20      	cmp	r3, #32
 8001440:	d140      	bne.n	80014c4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_UART_Receive_IT+0x26>
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e039      	b.n	80014c6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_UART_Receive_IT+0x38>
 800145c:	2302      	movs	r3, #2
 800145e:	e032      	b.n	80014c6 <HAL_UART_Receive_IT+0x9e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2222      	movs	r2, #34	; 0x22
 8001484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0220 	orr.w	r2, r2, #32
 80014be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e000      	b.n	80014c6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80014c4:	2302      	movs	r3, #2
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_UART_IRQHandler+0x52>
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f9ce 	bl	80018bc <UART_Receive_IT>
      return;
 8001520:	e0cc      	b.n	80016bc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80ab 	beq.w	8001680 <HAL_UART_IRQHandler+0x1b0>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_UART_IRQHandler+0x70>
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80a0 	beq.w	8001680 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00a      	beq.n	8001560 <HAL_UART_IRQHandler+0x90>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <HAL_UART_IRQHandler+0xb0>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00a      	beq.n	80015a0 <HAL_UART_IRQHandler+0xd0>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <HAL_UART_IRQHandler+0xf0>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	f043 0208 	orr.w	r2, r3, #8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d078      	beq.n	80016ba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_UART_IRQHandler+0x112>
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f96d 	bl	80018bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <HAL_UART_IRQHandler+0x13a>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d031      	beq.n	800166e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8b8 	bl	8001780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	2b00      	cmp	r3, #0
 8001634:	d013      	beq.n	800165e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <HAL_UART_IRQHandler+0x1f4>)
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff64 	bl	8000510 <HAL_DMA_Abort_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d016      	beq.n	800167c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001658:	4610      	mov	r0, r2
 800165a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800165c:	e00e      	b.n	800167c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f83b 	bl	80016da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001664:	e00a      	b.n	800167c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f837 	bl	80016da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800166c:	e006      	b.n	800167c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f833 	bl	80016da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800167a:	e01e      	b.n	80016ba <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800167c:	bf00      	nop
    return;
 800167e:	e01c      	b.n	80016ba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_UART_IRQHandler+0x1cc>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f8a4 	bl	80017e2 <UART_Transmit_IT>
    return;
 800169a:	e00f      	b.n	80016bc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00a      	beq.n	80016bc <HAL_UART_IRQHandler+0x1ec>
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8eb 	bl	800188c <UART_EndTransmit_IT>
    return;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <HAL_UART_IRQHandler+0x1ec>
    return;
 80016ba:	bf00      	nop
  }
}
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	080017bb 	.word	0x080017bb

080016c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016fc:	e02c      	b.n	8001758 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d028      	beq.n	8001758 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <UART_WaitOnFlagUntilTimeout+0x30>
 800170c:	f7fe fde8 	bl	80002e0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	429a      	cmp	r2, r3
 800171a:	d21d      	bcs.n	8001758 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800172a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e00f      	b.n	8001778 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4013      	ands	r3, r2
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	429a      	cmp	r2, r3
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	429a      	cmp	r2, r3
 8001774:	d0c3      	beq.n	80016fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001796:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff ff80 	bl	80016da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b21      	cmp	r3, #33	; 0x21
 80017f4:	d144      	bne.n	8001880 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fe:	d11a      	bne.n	8001836 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001814:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d105      	bne.n	800182a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	1c9a      	adds	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	e00e      	b.n	8001848 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	621a      	str	r2, [r3, #32]
 8001834:	e008      	b.n	8001848 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6211      	str	r1, [r2, #32]
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4619      	mov	r1, r3
 8001856:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10f      	bne.n	800187c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800187a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001880:	2302      	movs	r3, #2
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff0b 	bl	80016c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b22      	cmp	r3, #34	; 0x22
 80018ce:	d171      	bne.n	80019b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d8:	d123      	bne.n	8001922 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10e      	bne.n	8001906 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	1c9a      	adds	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
 8001904:	e029      	b.n	800195a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	b29b      	uxth	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
 8001920:	e01b      	b.n	800195a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6858      	ldr	r0, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6291      	str	r1, [r2, #40]	; 0x28
 800193a:	b2c2      	uxtb	r2, r0
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e00c      	b.n	800195a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	1c58      	adds	r0, r3, #1
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6288      	str	r0, [r1, #40]	; 0x28
 8001952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4619      	mov	r1, r3
 8001968:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800196a:	2b00      	cmp	r3, #0
 800196c:	d120      	bne.n	80019b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0220 	bic.w	r2, r2, #32
 800197c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800198c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f001 fc5e 	bl	8003268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e002      	b.n	80019b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019fa:	f023 030c 	bic.w	r3, r3, #12
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <UART_SetConfig+0x1ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d14e      	bne.n	8001ac6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a28:	f7ff fbe6 	bl	80011f8 <HAL_RCC_GetPCLK2Freq>
 8001a2c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	441a      	add	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	0119      	lsls	r1, r3, #4
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009a      	lsls	r2, r3, #2
 8001a58:	441a      	add	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001a66:	fba3 0302 	umull	r0, r3, r3, r2
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	fb00 f303 	mul.w	r3, r0, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	3332      	adds	r3, #50	; 0x32
 8001a78:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a84:	4419      	add	r1, r3
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009a      	lsls	r2, r3, #2
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	fb00 f303 	mul.w	r3, r0, r3
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	3332      	adds	r3, #50	; 0x32
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	440a      	add	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ac4:	e04d      	b.n	8001b62 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ac6:	f7ff fb83 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 8001aca:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	441a      	add	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	0119      	lsls	r1, r3, #4
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	009a      	lsls	r2, r3, #2
 8001af6:	441a      	add	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001b04:	fba3 0302 	umull	r0, r3, r3, r2
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	fb00 f303 	mul.w	r3, r0, r3
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	3332      	adds	r3, #50	; 0x32
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b22:	4419      	add	r1, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	441a      	add	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001b3c:	fba3 0302 	umull	r0, r3, r3, r2
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	fb00 f303 	mul.w	r3, r0, r3
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	3332      	adds	r3, #50	; 0x32
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <UART_SetConfig+0x1b0>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	f003 020f 	and.w	r2, r3, #15
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	440a      	add	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	51eb851f 	.word	0x51eb851f

08001b74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b86:	2b84      	cmp	r3, #132	; 0x84
 8001b88:	d005      	beq.n	8001b96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	3303      	adds	r3, #3
 8001b94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ba6:	f000 fb1d 	bl	80021e4 <vTaskStartScheduler>
  
  return osOK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685c      	ldr	r4, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc6:	b29e      	uxth	r6, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ffd0 	bl	8001b74 <makeFreeRtosPriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4632      	mov	r2, r6
 8001be2:	4629      	mov	r1, r5
 8001be4:	4620      	mov	r0, r4
 8001be6:	f000 f99f 	bl	8001f28 <xTaskCreate>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <osDelay+0x16>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	e000      	b.n	8001c16 <osDelay+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fab0 	bl	800217c <vTaskDelay>
  
  return osOK;
 8001c1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f000 f91c 	bl	8001e78 <xQueueGenericCreate>
 8001c40:	4603      	mov	r3, r0
#endif
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f103 0208 	add.w	r2, r3, #8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f103 0208 	add.w	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f103 0208 	add.w	r2, r3, #8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d103      	bne.n	8001d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e00c      	b.n	8001d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3308      	adds	r3, #8
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e002      	b.n	8001d14 <vListInsert+0x2e>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d2f6      	bcs.n	8001d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6892      	ldr	r2, [r2, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6852      	ldr	r2, [r2, #4]
 8001d76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d103      	bne.n	8001d8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	e7fe      	b.n	8001dce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001dd0:	f000 fe9a 	bl	8002b08 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	441a      	add	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	3b01      	subs	r3, #1
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	441a      	add	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	22ff      	movs	r2, #255	; 0xff
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01a      	beq.n	8001e64 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3310      	adds	r3, #16
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fbdc 	bl	80025f0 <xTaskRemoveFromEventList>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <xQueueGenericReset+0xcc>)
 8001e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	e009      	b.n	8001e64 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3310      	adds	r3, #16
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fef8 	bl	8001c4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3324      	adds	r3, #36	; 0x24
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fef3 	bl	8001c4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e64:	f000 fe7e 	bl	8002b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <xQueueGenericCreate+0x28>
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e7fe      	b.n	8001e9e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e004      	b.n	8001eb6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3348      	adds	r3, #72	; 0x48
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fede 	bl	8002c7c <pvPortMalloc>
 8001ec0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f805 	bl	8001eea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e002      	b.n	8001f0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f18:	2101      	movs	r1, #1
 8001f1a:	69b8      	ldr	r0, [r7, #24]
 8001f1c:	f7ff ff44 	bl	8001da8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af04      	add	r7, sp, #16
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fe9d 	bl	8002c7c <pvPortMalloc>
 8001f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001f4a:	2054      	movs	r0, #84	; 0x54
 8001f4c:	f000 fe96 	bl	8002c7c <pvPortMalloc>
 8001f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	e005      	b.n	8001f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f000 ff4d 	bl	8002e00 <vPortFree>
 8001f66:	e001      	b.n	8001f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d013      	beq.n	8001f9a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9303      	str	r3, [sp, #12]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f80e 	bl	8001faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f8e:	69f8      	ldr	r0, [r7, #28]
 8001f90:	f000 f88a 	bl	80020a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	e002      	b.n	8001fa0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f023 0307 	bic.w	r3, r3, #7
 8001fd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <prvInitialiseNewTask+0x46>
 8001fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe0:	f383 8811 	msr	BASEPRI, r3
 8001fe4:	f3bf 8f6f 	isb	sy
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e7fe      	b.n	8001fee <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	e012      	b.n	800201c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7819      	ldrb	r1, [r3, #0]
 8001ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	3334      	adds	r3, #52	; 0x34
 8002006:	460a      	mov	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	d9e9      	bls.n	8001ff6 <prvInitialiseNewTask+0x4c>
 8002022:	e000      	b.n	8002026 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002024:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	2b06      	cmp	r3, #6
 8002032:	d901      	bls.n	8002038 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002034:	2306      	movs	r3, #6
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	2200      	movs	r2, #0
 8002048:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	3304      	adds	r3, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe1a 	bl	8001c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	3318      	adds	r3, #24
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fe15 	bl	8001c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	f1c3 0207 	rsb	r2, r3, #7
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	2200      	movs	r2, #0
 8002078:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	69b8      	ldr	r0, [r7, #24]
 8002088:	f000 fc50 	bl	800292c <pxPortInitialiseStack>
 800208c:	4602      	mov	r2, r0
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020b0:	f000 fd2a 	bl	8002b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <prvAddNewTaskToReadyList+0xb8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <prvAddNewTaskToReadyList+0xb8>)
 80020bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <prvAddNewTaskToReadyList+0xbc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020c6:	4a27      	ldr	r2, [pc, #156]	; (8002164 <prvAddNewTaskToReadyList+0xbc>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <prvAddNewTaskToReadyList+0xb8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d110      	bne.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80020d4:	f000 fb06 	bl	80026e4 <prvInitialiseTaskLists>
 80020d8:	e00d      	b.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <prvAddNewTaskToReadyList+0xc0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <prvAddNewTaskToReadyList+0xbc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d802      	bhi.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <prvAddNewTaskToReadyList+0xbc>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <prvAddNewTaskToReadyList+0xc4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <prvAddNewTaskToReadyList+0xc4>)
 80020fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	2201      	movs	r2, #1
 8002106:	409a      	lsls	r2, r3
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <prvAddNewTaskToReadyList+0xc8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4313      	orrs	r3, r2
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <prvAddNewTaskToReadyList+0xc8>)
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <prvAddNewTaskToReadyList+0xcc>)
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f7ff fdb9 	bl	8001ca0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800212e:	f000 fd19 	bl	8002b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <prvAddNewTaskToReadyList+0xc0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00e      	beq.n	8002158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <prvAddNewTaskToReadyList+0xbc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <prvAddNewTaskToReadyList+0xd0>)
 800214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000190 	.word	0x20000190
 8002164:	20000090 	.word	0x20000090
 8002168:	2000019c 	.word	0x2000019c
 800216c:	200001ac 	.word	0x200001ac
 8002170:	20000198 	.word	0x20000198
 8002174:	20000094 	.word	0x20000094
 8002178:	e000ed04 	.word	0xe000ed04

0800217c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <vTaskDelay+0x60>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <vTaskDelay+0x2e>
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	e7fe      	b.n	80021a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80021aa:	f000 f861 	bl	8002270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021ae:	2100      	movs	r1, #0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fb55 	bl	8002860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021b6:	f000 f869 	bl	800228c <xTaskResumeAll>
 80021ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <vTaskDelay+0x64>)
 80021c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200001b8 	.word	0x200001b8
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <vTaskStartScheduler+0x74>)
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	4919      	ldr	r1, [pc, #100]	; (800225c <vTaskStartScheduler+0x78>)
 80021f8:	4819      	ldr	r0, [pc, #100]	; (8002260 <vTaskStartScheduler+0x7c>)
 80021fa:	f7ff fe95 	bl	8001f28 <xTaskCreate>
 80021fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d115      	bne.n	8002232 <vTaskStartScheduler+0x4e>
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <vTaskStartScheduler+0x80>)
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <vTaskStartScheduler+0x84>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <vTaskStartScheduler+0x88>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800222c:	f000 fbfc 	bl	8002a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002230:	e00d      	b.n	800224e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d109      	bne.n	800224e <vTaskStartScheduler+0x6a>
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	e7fe      	b.n	800224c <vTaskStartScheduler+0x68>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200001b4 	.word	0x200001b4
 800225c:	0800402c 	.word	0x0800402c
 8002260:	080026b5 	.word	0x080026b5
 8002264:	200001b0 	.word	0x200001b0
 8002268:	2000019c 	.word	0x2000019c
 800226c:	20000194 	.word	0x20000194

08002270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <vTaskSuspendAll+0x18>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	4a03      	ldr	r2, [pc, #12]	; (8002288 <vTaskSuspendAll+0x18>)
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200001b8 	.word	0x200001b8

0800228c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800229a:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <xTaskResumeAll+0x114>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <xTaskResumeAll+0x2a>
 80022a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	e7fe      	b.n	80022b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022b6:	f000 fc27 	bl	8002b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <xTaskResumeAll+0x114>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3b01      	subs	r3, #1
 80022c0:	4a37      	ldr	r2, [pc, #220]	; (80023a0 <xTaskResumeAll+0x114>)
 80022c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <xTaskResumeAll+0x114>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d161      	bne.n	8002390 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <xTaskResumeAll+0x118>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05d      	beq.n	8002390 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022d4:	e02e      	b.n	8002334 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <xTaskResumeAll+0x11c>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3318      	adds	r3, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fd37 	bl	8001d56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fd32 	bl	8001d56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <xTaskResumeAll+0x120>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <xTaskResumeAll+0x120>)
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <xTaskResumeAll+0x124>)
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7ff fcc0 	bl	8001ca0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <xTaskResumeAll+0x128>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <xTaskResumeAll+0x12c>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <xTaskResumeAll+0x11c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1cc      	bne.n	80022d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002342:	f000 fa4b 	bl	80027dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <xTaskResumeAll+0x130>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002352:	f000 f837 	bl	80023c4 <xTaskIncrementTick>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <xTaskResumeAll+0x12c>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3b01      	subs	r3, #1
 8002366:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f1      	bne.n	8002352 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <xTaskResumeAll+0x130>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <xTaskResumeAll+0x12c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800237c:	2301      	movs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <xTaskResumeAll+0x134>)
 8002382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002390:	f000 fbe8 	bl	8002b64 <vPortExitCritical>

	return xAlreadyYielded;
 8002394:	68bb      	ldr	r3, [r7, #8]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001b8 	.word	0x200001b8
 80023a4:	20000190 	.word	0x20000190
 80023a8:	20000150 	.word	0x20000150
 80023ac:	20000198 	.word	0x20000198
 80023b0:	20000094 	.word	0x20000094
 80023b4:	20000090 	.word	0x20000090
 80023b8:	200001a4 	.word	0x200001a4
 80023bc:	200001a0 	.word	0x200001a0
 80023c0:	e000ed04 	.word	0xe000ed04

080023c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <xTaskIncrementTick+0x14c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 808c 	bne.w	80024f0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023d8:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <xTaskIncrementTick+0x150>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <xTaskIncrementTick+0x150>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11f      	bne.n	800242c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <xTaskIncrementTick+0x154>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <xTaskIncrementTick+0x46>
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	e7fe      	b.n	8002408 <xTaskIncrementTick+0x44>
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <xTaskIncrementTick+0x154>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	4b42      	ldr	r3, [pc, #264]	; (800251c <xTaskIncrementTick+0x158>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a40      	ldr	r2, [pc, #256]	; (8002518 <xTaskIncrementTick+0x154>)
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4a40      	ldr	r2, [pc, #256]	; (800251c <xTaskIncrementTick+0x158>)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <xTaskIncrementTick+0x15c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a3e      	ldr	r2, [pc, #248]	; (8002520 <xTaskIncrementTick+0x15c>)
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	f000 f9d8 	bl	80027dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <xTaskIncrementTick+0x160>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	429a      	cmp	r2, r3
 8002434:	d34d      	bcc.n	80024d2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <xTaskIncrementTick+0x154>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <xTaskIncrementTick+0x80>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <xTaskIncrementTick+0x82>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <xTaskIncrementTick+0x160>)
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	601a      	str	r2, [r3, #0]
					break;
 8002452:	e03e      	b.n	80024d2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <xTaskIncrementTick+0x154>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d203      	bcs.n	8002474 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800246c:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <xTaskIncrementTick+0x160>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
						break;
 8002472:	e02e      	b.n	80024d2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3304      	adds	r3, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc6c 	bl	8001d56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3318      	adds	r3, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fc63 	bl	8001d56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <xTaskIncrementTick+0x164>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <xTaskIncrementTick+0x164>)
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <xTaskIncrementTick+0x168>)
 80024b0:	441a      	add	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7ff fbf1 	bl	8001ca0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <xTaskIncrementTick+0x16c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3b4      	bcc.n	8002436 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d0:	e7b1      	b.n	8002436 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <xTaskIncrementTick+0x16c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	4914      	ldr	r1, [pc, #80]	; (800252c <xTaskIncrementTick+0x168>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d907      	bls.n	80024fa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e004      	b.n	80024fa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <xTaskIncrementTick+0x170>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <xTaskIncrementTick+0x170>)
 80024f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <xTaskIncrementTick+0x174>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002502:	2301      	movs	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002506:	697b      	ldr	r3, [r7, #20]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200001b8 	.word	0x200001b8
 8002514:	20000194 	.word	0x20000194
 8002518:	20000148 	.word	0x20000148
 800251c:	2000014c 	.word	0x2000014c
 8002520:	200001a8 	.word	0x200001a8
 8002524:	200001b0 	.word	0x200001b0
 8002528:	20000198 	.word	0x20000198
 800252c:	20000094 	.word	0x20000094
 8002530:	20000090 	.word	0x20000090
 8002534:	200001a0 	.word	0x200001a0
 8002538:	200001a4 	.word	0x200001a4

0800253c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <vTaskSwitchContext+0xa0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <vTaskSwitchContext+0xa4>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002550:	e03e      	b.n	80025d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <vTaskSwitchContext+0xa4>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <vTaskSwitchContext+0xa8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	f1c3 031f 	rsb	r3, r3, #31
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	491e      	ldr	r1, [pc, #120]	; (80025e8 <vTaskSwitchContext+0xac>)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	e7fe      	b.n	8002594 <vTaskSwitchContext+0x58>
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <vTaskSwitchContext+0xac>)
 80025a2:	4413      	add	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	3308      	adds	r3, #8
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d104      	bne.n	80025c6 <vTaskSwitchContext+0x8a>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <vTaskSwitchContext+0xb0>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200001b8 	.word	0x200001b8
 80025e0:	200001a4 	.word	0x200001a4
 80025e4:	20000198 	.word	0x20000198
 80025e8:	20000094 	.word	0x20000094
 80025ec:	20000090 	.word	0x20000090

080025f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <xTaskRemoveFromEventList+0x2a>
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e7fe      	b.n	8002618 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3318      	adds	r3, #24
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fb99 	bl	8001d56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <xTaskRemoveFromEventList+0xac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11c      	bne.n	8002666 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3304      	adds	r3, #4
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fb90 	bl	8001d56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2201      	movs	r2, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <xTaskRemoveFromEventList+0xb0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <xTaskRemoveFromEventList+0xb0>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <xTaskRemoveFromEventList+0xb4>)
 8002656:	441a      	add	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7ff fb1e 	bl	8001ca0 <vListInsertEnd>
 8002664:	e005      	b.n	8002672 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	3318      	adds	r3, #24
 800266a:	4619      	mov	r1, r3
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <xTaskRemoveFromEventList+0xb8>)
 800266e:	f7ff fb17 	bl	8001ca0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <xTaskRemoveFromEventList+0xbc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	429a      	cmp	r2, r3
 800267e:	d905      	bls.n	800268c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <xTaskRemoveFromEventList+0xc0>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e001      	b.n	8002690 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002690:	697b      	ldr	r3, [r7, #20]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200001b8 	.word	0x200001b8
 80026a0:	20000198 	.word	0x20000198
 80026a4:	20000094 	.word	0x20000094
 80026a8:	20000150 	.word	0x20000150
 80026ac:	20000090 	.word	0x20000090
 80026b0:	200001a4 	.word	0x200001a4

080026b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80026bc:	f000 f852 	bl	8002764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <prvIdleTask+0x28>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d9f9      	bls.n	80026bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <prvIdleTask+0x2c>)
 80026ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80026d8:	e7f0      	b.n	80026bc <prvIdleTask+0x8>
 80026da:	bf00      	nop
 80026dc:	20000094 	.word	0x20000094
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	e00c      	b.n	800270a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <prvInitialiseTaskLists+0x60>)
 80026fc:	4413      	add	r3, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff faa3 	bl	8001c4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b06      	cmp	r3, #6
 800270e:	d9ef      	bls.n	80026f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <prvInitialiseTaskLists+0x64>)
 8002712:	f7ff fa9a 	bl	8001c4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <prvInitialiseTaskLists+0x68>)
 8002718:	f7ff fa97 	bl	8001c4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <prvInitialiseTaskLists+0x6c>)
 800271e:	f7ff fa94 	bl	8001c4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002722:	480c      	ldr	r0, [pc, #48]	; (8002754 <prvInitialiseTaskLists+0x70>)
 8002724:	f7ff fa91 	bl	8001c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <prvInitialiseTaskLists+0x74>)
 800272a:	f7ff fa8e 	bl	8001c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <prvInitialiseTaskLists+0x78>)
 8002730:	4a05      	ldr	r2, [pc, #20]	; (8002748 <prvInitialiseTaskLists+0x64>)
 8002732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <prvInitialiseTaskLists+0x7c>)
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <prvInitialiseTaskLists+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000094 	.word	0x20000094
 8002748:	20000120 	.word	0x20000120
 800274c:	20000134 	.word	0x20000134
 8002750:	20000150 	.word	0x20000150
 8002754:	20000164 	.word	0x20000164
 8002758:	2000017c 	.word	0x2000017c
 800275c:	20000148 	.word	0x20000148
 8002760:	2000014c 	.word	0x2000014c

08002764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800276a:	e019      	b.n	80027a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800276c:	f000 f9cc 	bl	8002b08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <prvCheckTasksWaitingTermination+0x4c>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff faea 	bl	8001d56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <prvCheckTasksWaitingTermination+0x50>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3b01      	subs	r3, #1
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <prvCheckTasksWaitingTermination+0x50>)
 800278a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <prvCheckTasksWaitingTermination+0x54>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <prvCheckTasksWaitingTermination+0x54>)
 8002794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002796:	f000 f9e5 	bl	8002b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f80e 	bl	80027bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <prvCheckTasksWaitingTermination+0x54>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e1      	bne.n	800276c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000164 	.word	0x20000164
 80027b4:	20000190 	.word	0x20000190
 80027b8:	20000178 	.word	0x20000178

080027bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fb19 	bl	8002e00 <vPortFree>
			vPortFree( pxTCB );
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fb16 	bl	8002e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <prvResetNextTaskUnblockTime+0x40>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <prvResetNextTaskUnblockTime+0x14>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <prvResetNextTaskUnblockTime+0x16>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <prvResetNextTaskUnblockTime+0x44>)
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80027fe:	e008      	b.n	8002812 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <prvResetNextTaskUnblockTime+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <prvResetNextTaskUnblockTime+0x44>)
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000148 	.word	0x20000148
 8002820:	200001b0 	.word	0x200001b0

08002824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <xTaskGetSchedulerState+0x34>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002832:	2301      	movs	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e008      	b.n	800284a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <xTaskGetSchedulerState+0x38>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002840:	2302      	movs	r3, #2
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	e001      	b.n	800284a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800284a:	687b      	ldr	r3, [r7, #4]
	}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000019c 	.word	0x2000019c
 800285c:	200001b8 	.word	0x200001b8

08002860 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <prvAddCurrentTaskToDelayedList+0xb0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fa6d 	bl	8001d56 <uxListRemove>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2201      	movs	r2, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4013      	ands	r3, r2
 8002896:	4a20      	ldr	r2, [pc, #128]	; (8002918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d10a      	bne.n	80028b8 <prvAddCurrentTaskToDelayedList+0x58>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	481a      	ldr	r0, [pc, #104]	; (800291c <prvAddCurrentTaskToDelayedList+0xbc>)
 80028b2:	f7ff f9f5 	bl	8001ca0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028b6:	e026      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d209      	bcs.n	80028e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff fa02 	bl	8001ce6 <vListInsert>
}
 80028e2:	e010      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7ff f9f8 	bl	8001ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d202      	bcs.n	8002906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000194 	.word	0x20000194
 8002914:	20000090 	.word	0x20000090
 8002918:	20000198 	.word	0x20000198
 800291c:	2000017c 	.word	0x2000017c
 8002920:	2000014c 	.word	0x2000014c
 8002924:	20000148 	.word	0x20000148
 8002928:	200001b0 	.word	0x200001b0

0800292c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3b04      	subs	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b04      	subs	r3, #4
 800294a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 0201 	bic.w	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b04      	subs	r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <pxPortInitialiseStack+0x54>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b14      	subs	r3, #20
 8002966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b20      	subs	r3, #32
 8002972:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	08002985 	.word	0x08002985

08002984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <prvTaskExitError+0x4c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d009      	beq.n	80029ac <prvTaskExitError+0x28>
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e7fe      	b.n	80029aa <prvTaskExitError+0x26>
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029be:	bf00      	nop
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0fc      	beq.n	80029c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20000008 	.word	0x20000008
	...

080029e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <pxCurrentTCBConst2>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029ea:	f380 8809 	msr	PSP, r0
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f380 8811 	msr	BASEPRI, r0
 80029fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80029fe:	4770      	bx	lr

08002a00 <pxCurrentTCBConst2>:
 8002a00:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop

08002a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <prvPortStartFirstTask+0x1c>)
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	6800      	ldr	r0, [r0, #0]
 8002a0e:	f380 8808 	msr	MSP, r0
 8002a12:	b662      	cpsie	i
 8002a14:	b661      	cpsie	f
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	df00      	svc	0
 8002a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a22:	bf00      	nop
 8002a24:	e000ed08 	.word	0xe000ed08

08002a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <xPortStartScheduler+0xcc>)
 8002a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <xPortStartScheduler+0xd0>)
 8002a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <xPortStartScheduler+0xd4>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a5c:	e009      	b.n	8002a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <xPortStartScheduler+0xd4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <xPortStartScheduler+0xd4>)
 8002a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d0ef      	beq.n	8002a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <xPortStartScheduler+0xd4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d009      	beq.n	8002a9e <xPortStartScheduler+0x76>
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	e7fe      	b.n	8002a9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <xPortStartScheduler+0xd4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <xPortStartScheduler+0xd4>)
 8002aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <xPortStartScheduler+0xd4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <xPortStartScheduler+0xd4>)
 8002ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <xPortStartScheduler+0xd8>)
 8002ace:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ad4:	f000 f8b0 	bl	8002c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <xPortStartScheduler+0xdc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ade:	f7ff ff93 	bl	8002a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ae2:	f7ff fd2b 	bl	800253c <vTaskSwitchContext>
	prvTaskExitError();
 8002ae6:	f7ff ff4d 	bl	8002984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	e000e400 	.word	0xe000e400
 8002af8:	200001bc 	.word	0x200001bc
 8002afc:	200001c0 	.word	0x200001c0
 8002b00:	e000ed20 	.word	0xe000ed20
 8002b04:	20000008 	.word	0x20000008

08002b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <vPortEnterCritical+0x54>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <vPortEnterCritical+0x54>)
 8002b28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <vPortEnterCritical+0x54>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10e      	bne.n	8002b50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <vPortEnterCritical+0x58>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <vPortEnterCritical+0x48>
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	e7fe      	b.n	8002b4e <vPortEnterCritical+0x46>
	}
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000008 	.word	0x20000008
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <vPortExitCritical+0x48>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <vPortExitCritical+0x22>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	e7fe      	b.n	8002b84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <vPortExitCritical+0x48>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <vPortExitCritical+0x48>)
 8002b8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <vPortExitCritical+0x48>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <vPortExitCritical+0x3e>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20000008 	.word	0x20000008

08002bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bb0:	f3ef 8009 	mrs	r0, PSP
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <pxCurrentTCBConst>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bc0:	6010      	str	r0, [r2, #0]
 8002bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002bc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bca:	f380 8811 	msr	BASEPRI, r0
 8002bce:	f7ff fcb5 	bl	800253c <vTaskSwitchContext>
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8811 	msr	BASEPRI, r0
 8002bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	6808      	ldr	r0, [r1, #0]
 8002be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002be6:	f380 8809 	msr	PSP, r0
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	4770      	bx	lr

08002bf0 <pxCurrentTCBConst>:
 8002bf0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop

08002bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c10:	f7ff fbd8 	bl	80023c4 <xTaskIncrementTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <xPortSysTickHandler+0x3c>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <vPortSetupTimerInterrupt+0x30>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <vPortSetupTimerInterrupt+0x34>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <vPortSetupTimerInterrupt+0x38>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <vPortSetupTimerInterrupt+0x3c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <vPortSetupTimerInterrupt+0x40>)
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <vPortSetupTimerInterrupt+0x30>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	e000e010 	.word	0xe000e010
 8002c6c:	e000e018 	.word	0xe000e018
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	10624dd3 	.word	0x10624dd3
 8002c78:	e000e014 	.word	0xe000e014

08002c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c88:	f7ff faf2 	bl	8002270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c8c:	4b57      	ldr	r3, [pc, #348]	; (8002dec <pvPortMalloc+0x170>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c94:	f000 f90c 	bl	8002eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c98:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <pvPortMalloc+0x174>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 808c 	bne.w	8002dbe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01c      	beq.n	8002ce6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002cac:	2208      	movs	r2, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f023 0307 	bic.w	r3, r3, #7
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <pvPortMalloc+0x6a>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e7fe      	b.n	8002ce4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d068      	beq.n	8002dbe <pvPortMalloc+0x142>
 8002cec:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <pvPortMalloc+0x178>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d863      	bhi.n	8002dbe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002cf6:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <pvPortMalloc+0x17c>)
 8002cf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <pvPortMalloc+0x17c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d00:	e004      	b.n	8002d0c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d903      	bls.n	8002d1e <pvPortMalloc+0xa2>
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f1      	bne.n	8002d02 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <pvPortMalloc+0x170>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d04a      	beq.n	8002dbe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4413      	add	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad2      	subs	r2, r2, r3
 8002d42:	2308      	movs	r3, #8
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d91e      	bls.n	8002d88 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <pvPortMalloc+0xf4>
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e7fe      	b.n	8002d6e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d82:	69b8      	ldr	r0, [r7, #24]
 8002d84:	f000 f8f6 	bl	8002f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <pvPortMalloc+0x178>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <pvPortMalloc+0x178>)
 8002d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <pvPortMalloc+0x178>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <pvPortMalloc+0x180>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d203      	bcs.n	8002daa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <pvPortMalloc+0x178>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <pvPortMalloc+0x180>)
 8002da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <pvPortMalloc+0x174>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002dbe:	f7ff fa65 	bl	800228c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <pvPortMalloc+0x164>
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e7fe      	b.n	8002dde <pvPortMalloc+0x162>
	return pvReturn;
 8002de0:	69fb      	ldr	r3, [r7, #28]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200029cc 	.word	0x200029cc
 8002df0:	200029d8 	.word	0x200029d8
 8002df4:	200029d0 	.word	0x200029d0
 8002df8:	200029c4 	.word	0x200029c4
 8002dfc:	200029d4 	.word	0x200029d4

08002e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d046      	beq.n	8002ea0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e12:	2308      	movs	r3, #8
 8002e14:	425b      	negs	r3, r3
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <vPortFree+0xa8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <vPortFree+0x42>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e7fe      	b.n	8002e40 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <vPortFree+0x5e>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e7fe      	b.n	8002e5c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <vPortFree+0xa8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <vPortFree+0xa8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e84:	f7ff f9f4 	bl	8002270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <vPortFree+0xac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a06      	ldr	r2, [pc, #24]	; (8002eac <vPortFree+0xac>)
 8002e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e96:	6938      	ldr	r0, [r7, #16]
 8002e98:	f000 f86c 	bl	8002f74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002e9c:	f7ff f9f6 	bl	800228c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200029d8 	.word	0x200029d8
 8002eac:	200029d0 	.word	0x200029d0

08002eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <prvHeapInit+0xac>)
 8002ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3307      	adds	r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <prvHeapInit+0xac>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <prvHeapInit+0xb0>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <prvHeapInit+0xb0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4413      	add	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002efc:	2208      	movs	r2, #8
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0307 	bic.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <prvHeapInit+0xb4>)
 8002f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <prvHeapInit+0xb4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <prvHeapInit+0xb4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	1ad2      	subs	r2, r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <prvHeapInit+0xb4>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <prvHeapInit+0xb8>)
 8002f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <prvHeapInit+0xbc>)
 8002f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <prvHeapInit+0xc0>)
 8002f4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	200001c4 	.word	0x200001c4
 8002f60:	200029c4 	.word	0x200029c4
 8002f64:	200029cc 	.word	0x200029cc
 8002f68:	200029d4 	.word	0x200029d4
 8002f6c:	200029d0 	.word	0x200029d0
 8002f70:	200029d8 	.word	0x200029d8

08002f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <prvInsertBlockIntoFreeList+0xa8>)
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <prvInsertBlockIntoFreeList+0x14>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d8f7      	bhi.n	8002f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d108      	bne.n	8002fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	441a      	add	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	441a      	add	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d118      	bne.n	8002ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <prvInsertBlockIntoFreeList+0xac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d00d      	beq.n	8002ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e008      	b.n	8003004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <prvInsertBlockIntoFreeList+0xac>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e003      	b.n	8003004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d002      	beq.n	8003012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	200029c4 	.word	0x200029c4
 8003020:	200029cc 	.word	0x200029cc

08003024 <__io_putchar>:
}
#endif

void SavePara(char *str,char *save_str)
{
	while(*str != '\0')
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	{
 800302c:	1d39      	adds	r1, r7, #4
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	2201      	movs	r2, #1
 8003034:	4803      	ldr	r0, [pc, #12]	; (8003044 <__io_putchar+0x20>)
 8003036:	f7fe f95e 	bl	80012f6 <HAL_UART_Transmit>
		*save_str++ = *str++;
 800303a:	687b      	ldr	r3, [r7, #4]
	}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20002d5c 	.word	0x20002d5c

08003048 <main>:
  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

 800304e:	f7fd f8ef 	bl	8000230 <HAL_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
 8003052:	f000 f859 	bl	8003108 <SystemClock_Config>
  LED2(OFF);
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRx1Buffer, 1);
  printf("************FreeRTOS********************\r\n");


  /* USER CODE END 2 */
 8003056:	f000 f8c7 	bl	80031e8 <MX_GPIO_Init>

 800305a:	f000 f89b 	bl	8003194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
 800305e:	2201      	movs	r2, #1
 8003060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003064:	481e      	ldr	r0, [pc, #120]	; (80030e0 <main+0x98>)
 8003066:	f7fd fcc5 	bl	80009f4 <HAL_GPIO_WritePin>
  /* USER CODE END RTOS_MUTEX */
 800306a:	2201      	movs	r2, #1
 800306c:	491d      	ldr	r1, [pc, #116]	; (80030e4 <main+0x9c>)
 800306e:	481e      	ldr	r0, [pc, #120]	; (80030e8 <main+0xa0>)
 8003070:	f7fe f9da 	bl	8001428 <HAL_UART_Receive_IT>

 8003074:	481d      	ldr	r0, [pc, #116]	; (80030ec <main+0xa4>)
 8003076:	f000 fbb9 	bl	80037ec <puts>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <main+0xa8>)
 800307c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003084:	e883 0003 	stmia.w	r3, {r0, r1}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fdc9 	bl	8001c26 <osMessageCreate>
 8003094:	4602      	mov	r2, r0
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <main+0xac>)
 8003098:	601a      	str	r2, [r3, #0]
  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <main+0xb0>)
 800309c:	f107 0414 	add.w	r4, r7, #20
 80030a0:	461d      	mov	r5, r3
 80030a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	6023      	str	r3, [r4, #0]
  /* USER CODE END RTOS_THREADS */
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fd7d 	bl	8001bb0 <osThreadCreate>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <main+0xb4>)
 80030ba:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <main+0xb8>)
 80030be:	463c      	mov	r4, r7
 80030c0:	461d      	mov	r5, r3
 80030c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	6023      	str	r3, [r4, #0]
  
 80030ca:	463b      	mov	r3, r7
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fd6e 	bl	8001bb0 <osThreadCreate>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <main+0xbc>)
 80030d8:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 80030da:	f7fe fd62 	bl	8001ba2 <osKernelStart>

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

 80030de:	e7fe      	b.n	80030de <main+0x96>
 80030e0:	40010c00 	.word	0x40010c00
 80030e4:	20002d58 	.word	0x20002d58
 80030e8:	20002d5c 	.word	0x20002d5c
 80030ec:	08004034 	.word	0x08004034
 80030f0:	08004060 	.word	0x08004060
 80030f4:	20003104 	.word	0x20003104
 80030f8:	08004074 	.word	0x08004074
 80030fc:	200029f0 	.word	0x200029f0
 8003100:	08004094 	.word	0x08004094
 8003104:	20002d9c 	.word	0x20002d9c

08003108 <SystemClock_Config>:

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	; 0x40
 800310c:	af00      	add	r7, sp, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800310e:	f107 0318 	add.w	r3, r7, #24
 8003112:	2228      	movs	r2, #40	; 0x28
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fb04 	bl	8003724 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    Error_Handler();
 800312e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003132:	61fb      	str	r3, [r7, #28]
  }
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
  /** Initializes the CPU, AHB and APB busses clocks 
 8003138:	2301      	movs	r3, #1
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  */
 800313c:	2302      	movs	r3, #2
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8003146:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fc67 	bl	8000a24 <HAL_RCC_OscConfig>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800315c:	f000 f8f8 	bl	8003350 <Error_Handler>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
 8003160:	230f      	movs	r3, #15
 8003162:	607b      	str	r3, [r7, #4]
    Error_Handler();
  }
 8003164:	2302      	movs	r3, #2
 8003166:	60bb      	str	r3, [r7, #8]
}
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	613b      	str	r3, [r7, #16]
/**
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  * @brief USART1 Initialization Function
  * @param None
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fed2 	bl	8000f24 <HAL_RCC_ClockConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <SystemClock_Config+0x82>
  * @retval None
  */
 8003186:	f000 f8e3 	bl	8003350 <Error_Handler>
static void MX_USART1_UART_Init(void)
{
 800318a:	bf00      	nop
 800318c:	3740      	adds	r7, #64	; 0x40
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <MX_USART1_UART_Init>:

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <MX_USART1_UART_Init+0x50>)
 800319c:	601a      	str	r2, [r3, #0]
  {
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a4:	605a      	str	r2, [r3, #4]
    Error_Handler();
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  }
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN USART1_Init 2 */
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]

 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031ba:	220c      	movs	r2, #12
 80031bc:	615a      	str	r2, [r3, #20]
  /* USER CODE END USART1_Init 2 */
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]

 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
}
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_USART1_UART_Init+0x4c>)
 80031cc:	f7fe f846 	bl	800125c <HAL_UART_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_USART1_UART_Init+0x46>

/**
 80031d6:	f000 f8bb 	bl	8003350 <Error_Handler>
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20002d5c 	.word	0x20002d5c
 80031e4:	40013800 	.word	0x40013800

080031e8 <MX_GPIO_Init>:
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0

 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <MX_GPIO_Init+0x78>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a17      	ldr	r2, [pc, #92]	; (8003260 <MX_GPIO_Init+0x78>)
 8003202:	f043 0308 	orr.w	r3, r3, #8
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <MX_GPIO_Init+0x78>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <MX_GPIO_Init+0x78>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <MX_GPIO_Init+0x78>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6193      	str	r3, [r2, #24]
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <MX_GPIO_Init+0x78>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 800322c:	2200      	movs	r2, #0
 800322e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003232:	480c      	ldr	r0, [pc, #48]	; (8003264 <MX_GPIO_Init+0x7c>)
 8003234:	f7fd fbde 	bl	80009f4 <HAL_GPIO_WritePin>
}

/* USER CODE BEGIN 4 */
 8003238:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800323c:	60bb      	str	r3, [r7, #8]
/**
 800323e:	2301      	movs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
  * @brief  Rx Transfer completed callbacks.
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
 8003246:	2302      	movs	r3, #2
 8003248:	617b      	str	r3, [r7, #20]
  *                the configuration information for the specified UART module.
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4619      	mov	r1, r3
 8003250:	4804      	ldr	r0, [pc, #16]	; (8003264 <MX_GPIO_Init+0x7c>)
 8003252:	f7fd fa65 	bl	8000720 <HAL_GPIO_Init>
  * @retval None
  */
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40010c00 	.word	0x40010c00

08003268 <HAL_UART_RxCpltCallback>:
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
	if(huart->Instance == huart1.Instance)
	{
		if(bRx1_complete != 0)
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
			return;

		if(Uart1_Rx_Cnt >= 255)
		{
			Uart1_Rx_Cnt = 0;
			memset(Uart1_RxBuff,0x00,sizeof(Uart1_RxBuff));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_UART_RxCpltCallback+0x90>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d132      	bne.n	80032e2 <HAL_UART_RxCpltCallback+0x7a>
		}
		else
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_UART_RxCpltCallback+0x94>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d134      	bne.n	80032ee <HAL_UART_RxCpltCallback+0x86>
		{
			Uart1_RxBuff[Uart1_Rx_Cnt] = aRx1Buffer;
			Uart1_Rx_Cnt++;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2bff      	cmp	r3, #255	; 0xff
 800328a:	d109      	bne.n	80032a0 <HAL_UART_RxCpltCallback+0x38>
			if((Uart1_RxBuff[Uart1_Rx_Cnt-1] == 0x0A)&&(Uart1_RxBuff[Uart1_Rx_Cnt-2] == 0x0D))
			{
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
				Uart1_Rx_Cnt= 0;
 8003292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003296:	2100      	movs	r1, #0
 8003298:	481a      	ldr	r0, [pc, #104]	; (8003304 <HAL_UART_RxCpltCallback+0x9c>)
 800329a:	f000 fa43 	bl	8003724 <memset>
 800329e:	e020      	b.n	80032e2 <HAL_UART_RxCpltCallback+0x7a>
				bRx1_complete = 0;
			}
		}
	}
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_UART_RxCpltCallback+0xa0>)
 80032a8:	7819      	ldrb	r1, [r3, #0]
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_UART_RxCpltCallback+0x9c>)
 80032ac:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRx1Buffer, 1);
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	3301      	adds	r3, #1
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032b8:	701a      	strb	r2, [r3, #0]
}
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3b01      	subs	r3, #1
 80032c0:	4a10      	ldr	r2, [pc, #64]	; (8003304 <HAL_UART_RxCpltCallback+0x9c>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	2b0a      	cmp	r3, #10
 80032c6:	d10c      	bne.n	80032e2 <HAL_UART_RxCpltCallback+0x7a>
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	3b02      	subs	r3, #2
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_UART_RxCpltCallback+0x9c>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	2b0d      	cmp	r3, #13
 80032d4:	d105      	bne.n	80032e2 <HAL_UART_RxCpltCallback+0x7a>

/* USER CODE END 4 */
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_UART_RxCpltCallback+0x98>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]

 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_UART_RxCpltCallback+0x94>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
 80032e2:	2201      	movs	r2, #1
 80032e4:	4908      	ldr	r1, [pc, #32]	; (8003308 <HAL_UART_RxCpltCallback+0xa0>)
 80032e6:	4804      	ldr	r0, [pc, #16]	; (80032f8 <HAL_UART_RxCpltCallback+0x90>)
 80032e8:	f7fe f89e 	bl	8001428 <HAL_UART_Receive_IT>
 80032ec:	e000      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x88>
		{
 80032ee:	bf00      	nop
  * @retval None
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20002d5c 	.word	0x20002d5c
 80032fc:	200029dc 	.word	0x200029dc
 8003300:	200029dd 	.word	0x200029dd
 8003304:	20002c58 	.word	0x20002c58
 8003308:	20002d58 	.word	0x20002d58

0800330c <StartDefaultTask>:
    
    

  /* USER CODE BEGIN 5 */

  /* Infinite loop */
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	f7fe fc72 	bl	8001bfe <osDelay>
 800331a:	e7fb      	b.n	8003314 <StartDefaultTask+0x8>

0800331c <StartTask02>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800332a:	4808      	ldr	r0, [pc, #32]	; (800334c <StartTask02+0x30>)
 800332c:	f7fd fb62 	bl	80009f4 <HAL_GPIO_WritePin>
 8003330:	20fa      	movs	r0, #250	; 0xfa
 8003332:	f7fe fc64 	bl	8001bfe <osDelay>
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <StartTask02+0x30>)
 800333e:	f7fd fb59 	bl	80009f4 <HAL_GPIO_WritePin>
 8003342:	20fa      	movs	r0, #250	; 0xfa
 8003344:	f7fe fc5b 	bl	8001bfe <osDelay>
 8003348:	e7ec      	b.n	8003324 <StartTask02+0x8>
 800334a:	bf00      	nop
 800334c:	40010c00 	.word	0x40010c00

08003350 <Error_Handler>:
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_MspInit+0x78>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_MspInit+0x78>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6193      	str	r3, [r2, #24]
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_MspInit+0x78>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_MspInit+0x78>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_MspInit+0x78>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_MspInit+0x78>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	210f      	movs	r1, #15
 8003396:	f06f 0001 	mvn.w	r0, #1
 800339a:	f7fd f882 	bl	80004a2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2105      	movs	r1, #5
 80033a2:	2005      	movs	r0, #5
 80033a4:	f7fd f87d 	bl	80004a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80033a8:	2005      	movs	r0, #5
 80033aa:	f7fd f896 	bl	80004da <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_MspInit+0x7c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_MspInit+0x7c>)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000

080033dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_UART_MspInit+0x9c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d139      	bne.n	8003470 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <HAL_UART_MspInit+0xa0>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <HAL_UART_MspInit+0xa0>)
 8003402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_UART_MspInit+0xa0>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_UART_MspInit+0xa0>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_UART_MspInit+0xa0>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_UART_MspInit+0xa0>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800342c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	4619      	mov	r1, r3
 8003440:	480f      	ldr	r0, [pc, #60]	; (8003480 <HAL_UART_MspInit+0xa4>)
 8003442:	f7fd f96d 	bl	8000720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	4619      	mov	r1, r3
 800345a:	4809      	ldr	r0, [pc, #36]	; (8003480 <HAL_UART_MspInit+0xa4>)
 800345c:	f7fd f960 	bl	8000720 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2105      	movs	r1, #5
 8003464:	2025      	movs	r0, #37	; 0x25
 8003466:	f7fd f81c 	bl	80004a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800346a:	2025      	movs	r0, #37	; 0x25
 800346c:	f7fd f835 	bl	80004da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	40021000 	.word	0x40021000
 8003480:	40010800 	.word	0x40010800

08003484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003494:	e7fe      	b.n	8003494 <HardFault_Handler+0x4>

08003496 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349a:	e7fe      	b.n	800349a <MemManage_Handler+0x4>

0800349c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a0:	e7fe      	b.n	80034a0 <BusFault_Handler+0x4>

080034a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a6:	e7fe      	b.n	80034a6 <UsageFault_Handler+0x4>

080034a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b8:	f7fc ff00 	bl	80002bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80034bc:	f7ff f9b2 	bl	8002824 <xTaskGetSchedulerState>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80034c6:	f7ff fb97 	bl	8002bf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}

080034ce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <USART1_IRQHandler+0x10>)
 80034e2:	f7fd fff5 	bl	80014d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20002d5c 	.word	0x20002d5c

080034f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e00a      	b.n	8003518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003502:	f3af 8000 	nop.w
 8003506:	4601      	mov	r1, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	60ba      	str	r2, [r7, #8]
 800350e:	b2ca      	uxtb	r2, r1
 8003510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	dbf0      	blt.n	8003502 <_read+0x12>
	}

return len;
 8003520:	687b      	ldr	r3, [r7, #4]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e009      	b.n	8003550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	60ba      	str	r2, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fd6d 	bl	8003024 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	dbf1      	blt.n	800353c <_write+0x12>
	}
	return len;
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_close>:

int _close(int file)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003588:	605a      	str	r2, [r3, #4]
	return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <_isatty>:

int _isatty(int file)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	return 1;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
	return 0;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
	...

080035c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <_sbrk+0x50>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <_sbrk+0x16>
		heap_end = &end;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <_sbrk+0x50>)
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <_sbrk+0x54>)
 80035d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <_sbrk+0x50>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <_sbrk+0x50>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	466a      	mov	r2, sp
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d907      	bls.n	80035fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80035ee:	f000 f86f 	bl	80036d0 <__errno>
 80035f2:	4602      	mov	r2, r0
 80035f4:	230c      	movs	r3, #12
 80035f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e006      	b.n	800360c <_sbrk+0x48>
	}

	heap_end += incr;
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <_sbrk+0x50>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <_sbrk+0x50>)
 8003608:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200029e0 	.word	0x200029e0
 8003618:	20003130 	.word	0x20003130

0800361c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <SystemInit+0x5c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <SystemInit+0x5c>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <SystemInit+0x5c>)
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4911      	ldr	r1, [pc, #68]	; (8003678 <SystemInit+0x5c>)
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <SystemInit+0x60>)
 8003634:	4013      	ands	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <SystemInit+0x5c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <SystemInit+0x5c>)
 800363e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <SystemInit+0x5c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <SystemInit+0x5c>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003654:	4b08      	ldr	r3, [pc, #32]	; (8003678 <SystemInit+0x5c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <SystemInit+0x5c>)
 800365a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800365e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SystemInit+0x5c>)
 8003662:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003666:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <SystemInit+0x64>)
 800366a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40021000 	.word	0x40021000
 800367c:	f8ff0000 	.word	0xf8ff0000
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003684:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003686:	e003      	b.n	8003690 <LoopCopyDataInit>

08003688 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800368a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800368c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800368e:	3104      	adds	r1, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003690:	480a      	ldr	r0, [pc, #40]	; (80036bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003694:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003696:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003698:	d3f6      	bcc.n	8003688 <CopyDataInit>
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800369c:	e002      	b.n	80036a4 <LoopFillZerobss>

0800369e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80036a0:	f842 3b04 	str.w	r3, [r2], #4

080036a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036a8:	d3f9      	bcc.n	800369e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036aa:	f7ff ffb7 	bl	800361c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ae:	f000 f815 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036b2:	f7ff fcc9 	bl	8003048 <main>
  bx lr
 80036b6:	4770      	bx	lr
  ldr r3, =_sidata
 80036b8:	0800412c 	.word	0x0800412c
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80036c0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80036c4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80036c8:	2000312c 	.word	0x2000312c

080036cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_2_IRQHandler>
	...

080036d0 <__errno>:
 80036d0:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <__errno+0x8>)
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000010 	.word	0x20000010

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	2500      	movs	r5, #0
 80036e0:	4e0c      	ldr	r6, [pc, #48]	; (8003714 <__libc_init_array+0x38>)
 80036e2:	4c0d      	ldr	r4, [pc, #52]	; (8003718 <__libc_init_array+0x3c>)
 80036e4:	1ba4      	subs	r4, r4, r6
 80036e6:	10a4      	asrs	r4, r4, #2
 80036e8:	42a5      	cmp	r5, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	f000 fc88 	bl	8004000 <_init>
 80036f0:	2500      	movs	r5, #0
 80036f2:	4e0a      	ldr	r6, [pc, #40]	; (800371c <__libc_init_array+0x40>)
 80036f4:	4c0a      	ldr	r4, [pc, #40]	; (8003720 <__libc_init_array+0x44>)
 80036f6:	1ba4      	subs	r4, r4, r6
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	42a5      	cmp	r5, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003704:	4798      	blx	r3
 8003706:	3501      	adds	r5, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800370e:	4798      	blx	r3
 8003710:	3501      	adds	r5, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	08004124 	.word	0x08004124
 8003718:	08004124 	.word	0x08004124
 800371c:	08004124 	.word	0x08004124
 8003720:	08004128 	.word	0x08004128

08003724 <memset>:
 8003724:	4603      	mov	r3, r0
 8003726:	4402      	add	r2, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	d100      	bne.n	800372e <memset+0xa>
 800372c:	4770      	bx	lr
 800372e:	f803 1b01 	strb.w	r1, [r3], #1
 8003732:	e7f9      	b.n	8003728 <memset+0x4>

08003734 <_puts_r>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	460e      	mov	r6, r1
 8003738:	4605      	mov	r5, r0
 800373a:	b118      	cbz	r0, 8003744 <_puts_r+0x10>
 800373c:	6983      	ldr	r3, [r0, #24]
 800373e:	b90b      	cbnz	r3, 8003744 <_puts_r+0x10>
 8003740:	f000 fa0c 	bl	8003b5c <__sinit>
 8003744:	69ab      	ldr	r3, [r5, #24]
 8003746:	68ac      	ldr	r4, [r5, #8]
 8003748:	b913      	cbnz	r3, 8003750 <_puts_r+0x1c>
 800374a:	4628      	mov	r0, r5
 800374c:	f000 fa06 	bl	8003b5c <__sinit>
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <_puts_r+0xac>)
 8003752:	429c      	cmp	r4, r3
 8003754:	d117      	bne.n	8003786 <_puts_r+0x52>
 8003756:	686c      	ldr	r4, [r5, #4]
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	071b      	lsls	r3, r3, #28
 800375c:	d51d      	bpl.n	800379a <_puts_r+0x66>
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	b1db      	cbz	r3, 800379a <_puts_r+0x66>
 8003762:	3e01      	subs	r6, #1
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800376a:	3b01      	subs	r3, #1
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	b9e9      	cbnz	r1, 80037ac <_puts_r+0x78>
 8003770:	2b00      	cmp	r3, #0
 8003772:	da2e      	bge.n	80037d2 <_puts_r+0x9e>
 8003774:	4622      	mov	r2, r4
 8003776:	210a      	movs	r1, #10
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f83f 	bl	80037fc <__swbuf_r>
 800377e:	3001      	adds	r0, #1
 8003780:	d011      	beq.n	80037a6 <_puts_r+0x72>
 8003782:	200a      	movs	r0, #10
 8003784:	e011      	b.n	80037aa <_puts_r+0x76>
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <_puts_r+0xb0>)
 8003788:	429c      	cmp	r4, r3
 800378a:	d101      	bne.n	8003790 <_puts_r+0x5c>
 800378c:	68ac      	ldr	r4, [r5, #8]
 800378e:	e7e3      	b.n	8003758 <_puts_r+0x24>
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <_puts_r+0xb4>)
 8003792:	429c      	cmp	r4, r3
 8003794:	bf08      	it	eq
 8003796:	68ec      	ldreq	r4, [r5, #12]
 8003798:	e7de      	b.n	8003758 <_puts_r+0x24>
 800379a:	4621      	mov	r1, r4
 800379c:	4628      	mov	r0, r5
 800379e:	f000 f87f 	bl	80038a0 <__swsetup_r>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d0dd      	beq.n	8003762 <_puts_r+0x2e>
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da04      	bge.n	80037ba <_puts_r+0x86>
 80037b0:	69a2      	ldr	r2, [r4, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dc06      	bgt.n	80037c4 <_puts_r+0x90>
 80037b6:	290a      	cmp	r1, #10
 80037b8:	d004      	beq.n	80037c4 <_puts_r+0x90>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	6022      	str	r2, [r4, #0]
 80037c0:	7019      	strb	r1, [r3, #0]
 80037c2:	e7cf      	b.n	8003764 <_puts_r+0x30>
 80037c4:	4622      	mov	r2, r4
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 f818 	bl	80037fc <__swbuf_r>
 80037cc:	3001      	adds	r0, #1
 80037ce:	d1c9      	bne.n	8003764 <_puts_r+0x30>
 80037d0:	e7e9      	b.n	80037a6 <_puts_r+0x72>
 80037d2:	200a      	movs	r0, #10
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	7018      	strb	r0, [r3, #0]
 80037dc:	e7e5      	b.n	80037aa <_puts_r+0x76>
 80037de:	bf00      	nop
 80037e0:	080040e4 	.word	0x080040e4
 80037e4:	08004104 	.word	0x08004104
 80037e8:	080040c4 	.word	0x080040c4

080037ec <puts>:
 80037ec:	4b02      	ldr	r3, [pc, #8]	; (80037f8 <puts+0xc>)
 80037ee:	4601      	mov	r1, r0
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f7ff bf9f 	b.w	8003734 <_puts_r>
 80037f6:	bf00      	nop
 80037f8:	20000010 	.word	0x20000010

080037fc <__swbuf_r>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	460e      	mov	r6, r1
 8003800:	4614      	mov	r4, r2
 8003802:	4605      	mov	r5, r0
 8003804:	b118      	cbz	r0, 800380e <__swbuf_r+0x12>
 8003806:	6983      	ldr	r3, [r0, #24]
 8003808:	b90b      	cbnz	r3, 800380e <__swbuf_r+0x12>
 800380a:	f000 f9a7 	bl	8003b5c <__sinit>
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <__swbuf_r+0x98>)
 8003810:	429c      	cmp	r4, r3
 8003812:	d12a      	bne.n	800386a <__swbuf_r+0x6e>
 8003814:	686c      	ldr	r4, [r5, #4]
 8003816:	69a3      	ldr	r3, [r4, #24]
 8003818:	60a3      	str	r3, [r4, #8]
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	071a      	lsls	r2, r3, #28
 800381e:	d52e      	bpl.n	800387e <__swbuf_r+0x82>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	b363      	cbz	r3, 800387e <__swbuf_r+0x82>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	b2f6      	uxtb	r6, r6
 800382a:	1ac0      	subs	r0, r0, r3
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	4637      	mov	r7, r6
 8003830:	4283      	cmp	r3, r0
 8003832:	dc04      	bgt.n	800383e <__swbuf_r+0x42>
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
 8003838:	f000 f926 	bl	8003a88 <_fflush_r>
 800383c:	bb28      	cbnz	r0, 800388a <__swbuf_r+0x8e>
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	3001      	adds	r0, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	60a3      	str	r3, [r4, #8]
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	6022      	str	r2, [r4, #0]
 800384c:	701e      	strb	r6, [r3, #0]
 800384e:	6963      	ldr	r3, [r4, #20]
 8003850:	4283      	cmp	r3, r0
 8003852:	d004      	beq.n	800385e <__swbuf_r+0x62>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	07db      	lsls	r3, r3, #31
 8003858:	d519      	bpl.n	800388e <__swbuf_r+0x92>
 800385a:	2e0a      	cmp	r6, #10
 800385c:	d117      	bne.n	800388e <__swbuf_r+0x92>
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 f911 	bl	8003a88 <_fflush_r>
 8003866:	b190      	cbz	r0, 800388e <__swbuf_r+0x92>
 8003868:	e00f      	b.n	800388a <__swbuf_r+0x8e>
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <__swbuf_r+0x9c>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d101      	bne.n	8003874 <__swbuf_r+0x78>
 8003870:	68ac      	ldr	r4, [r5, #8]
 8003872:	e7d0      	b.n	8003816 <__swbuf_r+0x1a>
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <__swbuf_r+0xa0>)
 8003876:	429c      	cmp	r4, r3
 8003878:	bf08      	it	eq
 800387a:	68ec      	ldreq	r4, [r5, #12]
 800387c:	e7cb      	b.n	8003816 <__swbuf_r+0x1a>
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f80d 	bl	80038a0 <__swsetup_r>
 8003886:	2800      	cmp	r0, #0
 8003888:	d0cc      	beq.n	8003824 <__swbuf_r+0x28>
 800388a:	f04f 37ff 	mov.w	r7, #4294967295
 800388e:	4638      	mov	r0, r7
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003892:	bf00      	nop
 8003894:	080040e4 	.word	0x080040e4
 8003898:	08004104 	.word	0x08004104
 800389c:	080040c4 	.word	0x080040c4

080038a0 <__swsetup_r>:
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <__swsetup_r+0xcc>)
 80038a2:	b570      	push	{r4, r5, r6, lr}
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	4606      	mov	r6, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	b125      	cbz	r5, 80038b6 <__swsetup_r+0x16>
 80038ac:	69ab      	ldr	r3, [r5, #24]
 80038ae:	b913      	cbnz	r3, 80038b6 <__swsetup_r+0x16>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f953 	bl	8003b5c <__sinit>
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <__swsetup_r+0xd0>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d10f      	bne.n	80038dc <__swsetup_r+0x3c>
 80038bc:	686c      	ldr	r4, [r5, #4]
 80038be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	0715      	lsls	r5, r2, #28
 80038c6:	d42c      	bmi.n	8003922 <__swsetup_r+0x82>
 80038c8:	06d0      	lsls	r0, r2, #27
 80038ca:	d411      	bmi.n	80038f0 <__swsetup_r+0x50>
 80038cc:	2209      	movs	r2, #9
 80038ce:	6032      	str	r2, [r6, #0]
 80038d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	e03e      	b.n	800395a <__swsetup_r+0xba>
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <__swsetup_r+0xd4>)
 80038de:	429c      	cmp	r4, r3
 80038e0:	d101      	bne.n	80038e6 <__swsetup_r+0x46>
 80038e2:	68ac      	ldr	r4, [r5, #8]
 80038e4:	e7eb      	b.n	80038be <__swsetup_r+0x1e>
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <__swsetup_r+0xd8>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	bf08      	it	eq
 80038ec:	68ec      	ldreq	r4, [r5, #12]
 80038ee:	e7e6      	b.n	80038be <__swsetup_r+0x1e>
 80038f0:	0751      	lsls	r1, r2, #29
 80038f2:	d512      	bpl.n	800391a <__swsetup_r+0x7a>
 80038f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038f6:	b141      	cbz	r1, 800390a <__swsetup_r+0x6a>
 80038f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038fc:	4299      	cmp	r1, r3
 80038fe:	d002      	beq.n	8003906 <__swsetup_r+0x66>
 8003900:	4630      	mov	r0, r6
 8003902:	f000 fa19 	bl	8003d38 <_free_r>
 8003906:	2300      	movs	r3, #0
 8003908:	6363      	str	r3, [r4, #52]	; 0x34
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	2300      	movs	r3, #0
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	b94b      	cbnz	r3, 800393a <__swsetup_r+0x9a>
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d003      	beq.n	800393a <__swsetup_r+0x9a>
 8003932:	4621      	mov	r1, r4
 8003934:	4630      	mov	r0, r6
 8003936:	f000 f9bf 	bl	8003cb8 <__smakebuf_r>
 800393a:	89a2      	ldrh	r2, [r4, #12]
 800393c:	f012 0301 	ands.w	r3, r2, #1
 8003940:	d00c      	beq.n	800395c <__swsetup_r+0xbc>
 8003942:	2300      	movs	r3, #0
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	6963      	ldr	r3, [r4, #20]
 8003948:	425b      	negs	r3, r3
 800394a:	61a3      	str	r3, [r4, #24]
 800394c:	6923      	ldr	r3, [r4, #16]
 800394e:	b953      	cbnz	r3, 8003966 <__swsetup_r+0xc6>
 8003950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003954:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003958:	d1ba      	bne.n	80038d0 <__swsetup_r+0x30>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	0792      	lsls	r2, r2, #30
 800395e:	bf58      	it	pl
 8003960:	6963      	ldrpl	r3, [r4, #20]
 8003962:	60a3      	str	r3, [r4, #8]
 8003964:	e7f2      	b.n	800394c <__swsetup_r+0xac>
 8003966:	2000      	movs	r0, #0
 8003968:	e7f7      	b.n	800395a <__swsetup_r+0xba>
 800396a:	bf00      	nop
 800396c:	20000010 	.word	0x20000010
 8003970:	080040e4 	.word	0x080040e4
 8003974:	08004104 	.word	0x08004104
 8003978:	080040c4 	.word	0x080040c4

0800397c <__sflush_r>:
 800397c:	898a      	ldrh	r2, [r1, #12]
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	0710      	lsls	r0, r2, #28
 8003986:	460c      	mov	r4, r1
 8003988:	d458      	bmi.n	8003a3c <__sflush_r+0xc0>
 800398a:	684b      	ldr	r3, [r1, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	dc05      	bgt.n	800399c <__sflush_r+0x20>
 8003990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	dc02      	bgt.n	800399c <__sflush_r+0x20>
 8003996:	2000      	movs	r0, #0
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d0f9      	beq.n	8003996 <__sflush_r+0x1a>
 80039a2:	2300      	movs	r3, #0
 80039a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039a8:	682f      	ldr	r7, [r5, #0]
 80039aa:	6a21      	ldr	r1, [r4, #32]
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	d032      	beq.n	8003a16 <__sflush_r+0x9a>
 80039b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	075a      	lsls	r2, r3, #29
 80039b6:	d505      	bpl.n	80039c4 <__sflush_r+0x48>
 80039b8:	6863      	ldr	r3, [r4, #4]
 80039ba:	1ac0      	subs	r0, r0, r3
 80039bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039be:	b10b      	cbz	r3, 80039c4 <__sflush_r+0x48>
 80039c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039c2:	1ac0      	subs	r0, r0, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	4602      	mov	r2, r0
 80039c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ca:	6a21      	ldr	r1, [r4, #32]
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b0      	blx	r6
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	d106      	bne.n	80039e4 <__sflush_r+0x68>
 80039d6:	6829      	ldr	r1, [r5, #0]
 80039d8:	291d      	cmp	r1, #29
 80039da:	d848      	bhi.n	8003a6e <__sflush_r+0xf2>
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <__sflush_r+0x108>)
 80039de:	40ca      	lsrs	r2, r1
 80039e0:	07d6      	lsls	r6, r2, #31
 80039e2:	d544      	bpl.n	8003a6e <__sflush_r+0xf2>
 80039e4:	2200      	movs	r2, #0
 80039e6:	6062      	str	r2, [r4, #4]
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	04d9      	lsls	r1, r3, #19
 80039ec:	6022      	str	r2, [r4, #0]
 80039ee:	d504      	bpl.n	80039fa <__sflush_r+0x7e>
 80039f0:	1c42      	adds	r2, r0, #1
 80039f2:	d101      	bne.n	80039f8 <__sflush_r+0x7c>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	b903      	cbnz	r3, 80039fa <__sflush_r+0x7e>
 80039f8:	6560      	str	r0, [r4, #84]	; 0x54
 80039fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039fc:	602f      	str	r7, [r5, #0]
 80039fe:	2900      	cmp	r1, #0
 8003a00:	d0c9      	beq.n	8003996 <__sflush_r+0x1a>
 8003a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a06:	4299      	cmp	r1, r3
 8003a08:	d002      	beq.n	8003a10 <__sflush_r+0x94>
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 f994 	bl	8003d38 <_free_r>
 8003a10:	2000      	movs	r0, #0
 8003a12:	6360      	str	r0, [r4, #52]	; 0x34
 8003a14:	e7c0      	b.n	8003998 <__sflush_r+0x1c>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	1c41      	adds	r1, r0, #1
 8003a1e:	d1c8      	bne.n	80039b2 <__sflush_r+0x36>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0c5      	beq.n	80039b2 <__sflush_r+0x36>
 8003a26:	2b1d      	cmp	r3, #29
 8003a28:	d001      	beq.n	8003a2e <__sflush_r+0xb2>
 8003a2a:	2b16      	cmp	r3, #22
 8003a2c:	d101      	bne.n	8003a32 <__sflush_r+0xb6>
 8003a2e:	602f      	str	r7, [r5, #0]
 8003a30:	e7b1      	b.n	8003996 <__sflush_r+0x1a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	e7ad      	b.n	8003998 <__sflush_r+0x1c>
 8003a3c:	690f      	ldr	r7, [r1, #16]
 8003a3e:	2f00      	cmp	r7, #0
 8003a40:	d0a9      	beq.n	8003996 <__sflush_r+0x1a>
 8003a42:	0793      	lsls	r3, r2, #30
 8003a44:	bf18      	it	ne
 8003a46:	2300      	movne	r3, #0
 8003a48:	680e      	ldr	r6, [r1, #0]
 8003a4a:	bf08      	it	eq
 8003a4c:	694b      	ldreq	r3, [r1, #20]
 8003a4e:	eba6 0807 	sub.w	r8, r6, r7
 8003a52:	600f      	str	r7, [r1, #0]
 8003a54:	608b      	str	r3, [r1, #8]
 8003a56:	f1b8 0f00 	cmp.w	r8, #0
 8003a5a:	dd9c      	ble.n	8003996 <__sflush_r+0x1a>
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	463a      	mov	r2, r7
 8003a60:	6a21      	ldr	r1, [r4, #32]
 8003a62:	4628      	mov	r0, r5
 8003a64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a66:	47b0      	blx	r6
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	dc06      	bgt.n	8003a7a <__sflush_r+0xfe>
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a72:	81a3      	strh	r3, [r4, #12]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	e78e      	b.n	8003998 <__sflush_r+0x1c>
 8003a7a:	4407      	add	r7, r0
 8003a7c:	eba8 0800 	sub.w	r8, r8, r0
 8003a80:	e7e9      	b.n	8003a56 <__sflush_r+0xda>
 8003a82:	bf00      	nop
 8003a84:	20400001 	.word	0x20400001

08003a88 <_fflush_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	690b      	ldr	r3, [r1, #16]
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	b1db      	cbz	r3, 8003aca <_fflush_r+0x42>
 8003a92:	b118      	cbz	r0, 8003a9c <_fflush_r+0x14>
 8003a94:	6983      	ldr	r3, [r0, #24]
 8003a96:	b90b      	cbnz	r3, 8003a9c <_fflush_r+0x14>
 8003a98:	f000 f860 	bl	8003b5c <__sinit>
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <_fflush_r+0x48>)
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	d109      	bne.n	8003ab6 <_fflush_r+0x2e>
 8003aa2:	686c      	ldr	r4, [r5, #4]
 8003aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa8:	b17b      	cbz	r3, 8003aca <_fflush_r+0x42>
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ab2:	f7ff bf63 	b.w	800397c <__sflush_r>
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <_fflush_r+0x4c>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d101      	bne.n	8003ac0 <_fflush_r+0x38>
 8003abc:	68ac      	ldr	r4, [r5, #8]
 8003abe:	e7f1      	b.n	8003aa4 <_fflush_r+0x1c>
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <_fflush_r+0x50>)
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	bf08      	it	eq
 8003ac6:	68ec      	ldreq	r4, [r5, #12]
 8003ac8:	e7ec      	b.n	8003aa4 <_fflush_r+0x1c>
 8003aca:	2000      	movs	r0, #0
 8003acc:	bd38      	pop	{r3, r4, r5, pc}
 8003ace:	bf00      	nop
 8003ad0:	080040e4 	.word	0x080040e4
 8003ad4:	08004104 	.word	0x08004104
 8003ad8:	080040c4 	.word	0x080040c4

08003adc <std>:
 8003adc:	2300      	movs	r3, #0
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ae6:	6083      	str	r3, [r0, #8]
 8003ae8:	8181      	strh	r1, [r0, #12]
 8003aea:	6643      	str	r3, [r0, #100]	; 0x64
 8003aec:	81c2      	strh	r2, [r0, #14]
 8003aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003af2:	6183      	str	r3, [r0, #24]
 8003af4:	4619      	mov	r1, r3
 8003af6:	2208      	movs	r2, #8
 8003af8:	305c      	adds	r0, #92	; 0x5c
 8003afa:	f7ff fe13 	bl	8003724 <memset>
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <std+0x38>)
 8003b00:	6224      	str	r4, [r4, #32]
 8003b02:	6263      	str	r3, [r4, #36]	; 0x24
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <std+0x3c>)
 8003b06:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <std+0x40>)
 8003b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <std+0x44>)
 8003b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b10:	bd10      	pop	{r4, pc}
 8003b12:	bf00      	nop
 8003b14:	08003ea5 	.word	0x08003ea5
 8003b18:	08003ec7 	.word	0x08003ec7
 8003b1c:	08003eff 	.word	0x08003eff
 8003b20:	08003f23 	.word	0x08003f23

08003b24 <_cleanup_r>:
 8003b24:	4901      	ldr	r1, [pc, #4]	; (8003b2c <_cleanup_r+0x8>)
 8003b26:	f000 b885 	b.w	8003c34 <_fwalk_reent>
 8003b2a:	bf00      	nop
 8003b2c:	08003a89 	.word	0x08003a89

08003b30 <__sfmoreglue>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	2568      	movs	r5, #104	; 0x68
 8003b34:	1e4a      	subs	r2, r1, #1
 8003b36:	4355      	muls	r5, r2
 8003b38:	460e      	mov	r6, r1
 8003b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b3e:	f000 f947 	bl	8003dd0 <_malloc_r>
 8003b42:	4604      	mov	r4, r0
 8003b44:	b140      	cbz	r0, 8003b58 <__sfmoreglue+0x28>
 8003b46:	2100      	movs	r1, #0
 8003b48:	e9c0 1600 	strd	r1, r6, [r0]
 8003b4c:	300c      	adds	r0, #12
 8003b4e:	60a0      	str	r0, [r4, #8]
 8003b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b54:	f7ff fde6 	bl	8003724 <memset>
 8003b58:	4620      	mov	r0, r4
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}

08003b5c <__sinit>:
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	4604      	mov	r4, r0
 8003b62:	bb33      	cbnz	r3, 8003bb2 <__sinit+0x56>
 8003b64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b68:	6503      	str	r3, [r0, #80]	; 0x50
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <__sinit+0x58>)
 8003b6c:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <__sinit+0x5c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6282      	str	r2, [r0, #40]	; 0x28
 8003b72:	4298      	cmp	r0, r3
 8003b74:	bf04      	itt	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	6183      	streq	r3, [r0, #24]
 8003b7a:	f000 f81f 	bl	8003bbc <__sfp>
 8003b7e:	6060      	str	r0, [r4, #4]
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 f81b 	bl	8003bbc <__sfp>
 8003b86:	60a0      	str	r0, [r4, #8]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f817 	bl	8003bbc <__sfp>
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60e0      	str	r0, [r4, #12]
 8003b92:	2104      	movs	r1, #4
 8003b94:	6860      	ldr	r0, [r4, #4]
 8003b96:	f7ff ffa1 	bl	8003adc <std>
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2109      	movs	r1, #9
 8003b9e:	68a0      	ldr	r0, [r4, #8]
 8003ba0:	f7ff ff9c 	bl	8003adc <std>
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	2112      	movs	r1, #18
 8003ba8:	68e0      	ldr	r0, [r4, #12]
 8003baa:	f7ff ff97 	bl	8003adc <std>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61a3      	str	r3, [r4, #24]
 8003bb2:	bd10      	pop	{r4, pc}
 8003bb4:	080040c0 	.word	0x080040c0
 8003bb8:	08003b25 	.word	0x08003b25

08003bbc <__sfp>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <__sfp+0x70>)
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	681e      	ldr	r6, [r3, #0]
 8003bc4:	69b3      	ldr	r3, [r6, #24]
 8003bc6:	b913      	cbnz	r3, 8003bce <__sfp+0x12>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f7ff ffc7 	bl	8003b5c <__sinit>
 8003bce:	3648      	adds	r6, #72	; 0x48
 8003bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	d503      	bpl.n	8003be0 <__sfp+0x24>
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	b133      	cbz	r3, 8003bea <__sfp+0x2e>
 8003bdc:	6836      	ldr	r6, [r6, #0]
 8003bde:	e7f7      	b.n	8003bd0 <__sfp+0x14>
 8003be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003be4:	b16d      	cbz	r5, 8003c02 <__sfp+0x46>
 8003be6:	3468      	adds	r4, #104	; 0x68
 8003be8:	e7f4      	b.n	8003bd4 <__sfp+0x18>
 8003bea:	2104      	movs	r1, #4
 8003bec:	4638      	mov	r0, r7
 8003bee:	f7ff ff9f 	bl	8003b30 <__sfmoreglue>
 8003bf2:	6030      	str	r0, [r6, #0]
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d1f1      	bne.n	8003bdc <__sfp+0x20>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <__sfp+0x74>)
 8003c04:	6665      	str	r5, [r4, #100]	; 0x64
 8003c06:	e9c4 5500 	strd	r5, r5, [r4]
 8003c0a:	60a5      	str	r5, [r4, #8]
 8003c0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c14:	2208      	movs	r2, #8
 8003c16:	4629      	mov	r1, r5
 8003c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c1c:	f7ff fd82 	bl	8003724 <memset>
 8003c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c28:	e7e9      	b.n	8003bfe <__sfp+0x42>
 8003c2a:	bf00      	nop
 8003c2c:	080040c0 	.word	0x080040c0
 8003c30:	ffff0001 	.word	0xffff0001

08003c34 <_fwalk_reent>:
 8003c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	4680      	mov	r8, r0
 8003c3a:	4689      	mov	r9, r1
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c42:	b914      	cbnz	r4, 8003c4a <_fwalk_reent+0x16>
 8003c44:	4630      	mov	r0, r6
 8003c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c4e:	3f01      	subs	r7, #1
 8003c50:	d501      	bpl.n	8003c56 <_fwalk_reent+0x22>
 8003c52:	6824      	ldr	r4, [r4, #0]
 8003c54:	e7f5      	b.n	8003c42 <_fwalk_reent+0xe>
 8003c56:	89ab      	ldrh	r3, [r5, #12]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d907      	bls.n	8003c6c <_fwalk_reent+0x38>
 8003c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c60:	3301      	adds	r3, #1
 8003c62:	d003      	beq.n	8003c6c <_fwalk_reent+0x38>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4640      	mov	r0, r8
 8003c68:	47c8      	blx	r9
 8003c6a:	4306      	orrs	r6, r0
 8003c6c:	3568      	adds	r5, #104	; 0x68
 8003c6e:	e7ee      	b.n	8003c4e <_fwalk_reent+0x1a>

08003c70 <__swhatbuf_r>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	460e      	mov	r6, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	b096      	sub	sp, #88	; 0x58
 8003c7a:	2900      	cmp	r1, #0
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	da07      	bge.n	8003c92 <__swhatbuf_r+0x22>
 8003c82:	2300      	movs	r3, #0
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	89b3      	ldrh	r3, [r6, #12]
 8003c88:	061a      	lsls	r2, r3, #24
 8003c8a:	d410      	bmi.n	8003cae <__swhatbuf_r+0x3e>
 8003c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c90:	e00e      	b.n	8003cb0 <__swhatbuf_r+0x40>
 8003c92:	466a      	mov	r2, sp
 8003c94:	f000 f96c 	bl	8003f70 <_fstat_r>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	dbf2      	blt.n	8003c82 <__swhatbuf_r+0x12>
 8003c9c:	9a01      	ldr	r2, [sp, #4]
 8003c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca6:	425a      	negs	r2, r3
 8003ca8:	415a      	adcs	r2, r3
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	e7ee      	b.n	8003c8c <__swhatbuf_r+0x1c>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	b016      	add	sp, #88	; 0x58
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}

08003cb8 <__smakebuf_r>:
 8003cb8:	898b      	ldrh	r3, [r1, #12]
 8003cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cbc:	079d      	lsls	r5, r3, #30
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	d507      	bpl.n	8003cd4 <__smakebuf_r+0x1c>
 8003cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	6163      	str	r3, [r4, #20]
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	ab01      	add	r3, sp, #4
 8003cd6:	466a      	mov	r2, sp
 8003cd8:	f7ff ffca 	bl	8003c70 <__swhatbuf_r>
 8003cdc:	9900      	ldr	r1, [sp, #0]
 8003cde:	4605      	mov	r5, r0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 f875 	bl	8003dd0 <_malloc_r>
 8003ce6:	b948      	cbnz	r0, 8003cfc <__smakebuf_r+0x44>
 8003ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cec:	059a      	lsls	r2, r3, #22
 8003cee:	d4ef      	bmi.n	8003cd0 <__smakebuf_r+0x18>
 8003cf0:	f023 0303 	bic.w	r3, r3, #3
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	e7e3      	b.n	8003cc4 <__smakebuf_r+0xc>
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <__smakebuf_r+0x7c>)
 8003cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	6020      	str	r0, [r4, #0]
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	9b00      	ldr	r3, [sp, #0]
 8003d0c:	6120      	str	r0, [r4, #16]
 8003d0e:	6163      	str	r3, [r4, #20]
 8003d10:	9b01      	ldr	r3, [sp, #4]
 8003d12:	b15b      	cbz	r3, 8003d2c <__smakebuf_r+0x74>
 8003d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f93b 	bl	8003f94 <_isatty_r>
 8003d1e:	b128      	cbz	r0, 8003d2c <__smakebuf_r+0x74>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	431d      	orrs	r5, r3
 8003d30:	81a5      	strh	r5, [r4, #12]
 8003d32:	e7cd      	b.n	8003cd0 <__smakebuf_r+0x18>
 8003d34:	08003b25 	.word	0x08003b25

08003d38 <_free_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d043      	beq.n	8003dc8 <_free_r+0x90>
 8003d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d44:	1f0c      	subs	r4, r1, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfb8      	it	lt
 8003d4a:	18e4      	addlt	r4, r4, r3
 8003d4c:	f000 f944 	bl	8003fd8 <__malloc_lock>
 8003d50:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <_free_r+0x94>)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	b933      	cbnz	r3, 8003d66 <_free_r+0x2e>
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	6014      	str	r4, [r2, #0]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d62:	f000 b93a 	b.w	8003fda <__malloc_unlock>
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	d90b      	bls.n	8003d82 <_free_r+0x4a>
 8003d6a:	6821      	ldr	r1, [r4, #0]
 8003d6c:	1862      	adds	r2, r4, r1
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bf01      	itttt	eq
 8003d72:	681a      	ldreq	r2, [r3, #0]
 8003d74:	685b      	ldreq	r3, [r3, #4]
 8003d76:	1852      	addeq	r2, r2, r1
 8003d78:	6022      	streq	r2, [r4, #0]
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6004      	str	r4, [r0, #0]
 8003d7e:	e7ed      	b.n	8003d5c <_free_r+0x24>
 8003d80:	4613      	mov	r3, r2
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	b10a      	cbz	r2, 8003d8a <_free_r+0x52>
 8003d86:	42a2      	cmp	r2, r4
 8003d88:	d9fa      	bls.n	8003d80 <_free_r+0x48>
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	1858      	adds	r0, r3, r1
 8003d8e:	42a0      	cmp	r0, r4
 8003d90:	d10b      	bne.n	8003daa <_free_r+0x72>
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	4401      	add	r1, r0
 8003d96:	1858      	adds	r0, r3, r1
 8003d98:	4282      	cmp	r2, r0
 8003d9a:	6019      	str	r1, [r3, #0]
 8003d9c:	d1de      	bne.n	8003d5c <_free_r+0x24>
 8003d9e:	6810      	ldr	r0, [r2, #0]
 8003da0:	6852      	ldr	r2, [r2, #4]
 8003da2:	4401      	add	r1, r0
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	e7d8      	b.n	8003d5c <_free_r+0x24>
 8003daa:	d902      	bls.n	8003db2 <_free_r+0x7a>
 8003dac:	230c      	movs	r3, #12
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	e7d4      	b.n	8003d5c <_free_r+0x24>
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	1821      	adds	r1, r4, r0
 8003db6:	428a      	cmp	r2, r1
 8003db8:	bf01      	itttt	eq
 8003dba:	6811      	ldreq	r1, [r2, #0]
 8003dbc:	6852      	ldreq	r2, [r2, #4]
 8003dbe:	1809      	addeq	r1, r1, r0
 8003dc0:	6021      	streq	r1, [r4, #0]
 8003dc2:	6062      	str	r2, [r4, #4]
 8003dc4:	605c      	str	r4, [r3, #4]
 8003dc6:	e7c9      	b.n	8003d5c <_free_r+0x24>
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
 8003dca:	bf00      	nop
 8003dcc:	200029e4 	.word	0x200029e4

08003dd0 <_malloc_r>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	1ccd      	adds	r5, r1, #3
 8003dd4:	f025 0503 	bic.w	r5, r5, #3
 8003dd8:	3508      	adds	r5, #8
 8003dda:	2d0c      	cmp	r5, #12
 8003ddc:	bf38      	it	cc
 8003dde:	250c      	movcc	r5, #12
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	4606      	mov	r6, r0
 8003de4:	db01      	blt.n	8003dea <_malloc_r+0x1a>
 8003de6:	42a9      	cmp	r1, r5
 8003de8:	d903      	bls.n	8003df2 <_malloc_r+0x22>
 8003dea:	230c      	movs	r3, #12
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	2000      	movs	r0, #0
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
 8003df2:	f000 f8f1 	bl	8003fd8 <__malloc_lock>
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <_malloc_r+0xac>)
 8003df8:	6814      	ldr	r4, [r2, #0]
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	b991      	cbnz	r1, 8003e24 <_malloc_r+0x54>
 8003dfe:	4c20      	ldr	r4, [pc, #128]	; (8003e80 <_malloc_r+0xb0>)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	b91b      	cbnz	r3, 8003e0c <_malloc_r+0x3c>
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 f83d 	bl	8003e84 <_sbrk_r>
 8003e0a:	6020      	str	r0, [r4, #0]
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f000 f838 	bl	8003e84 <_sbrk_r>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d124      	bne.n	8003e62 <_malloc_r+0x92>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	f000 f8dc 	bl	8003fda <__malloc_unlock>
 8003e22:	e7e4      	b.n	8003dee <_malloc_r+0x1e>
 8003e24:	680b      	ldr	r3, [r1, #0]
 8003e26:	1b5b      	subs	r3, r3, r5
 8003e28:	d418      	bmi.n	8003e5c <_malloc_r+0x8c>
 8003e2a:	2b0b      	cmp	r3, #11
 8003e2c:	d90f      	bls.n	8003e4e <_malloc_r+0x7e>
 8003e2e:	600b      	str	r3, [r1, #0]
 8003e30:	18cc      	adds	r4, r1, r3
 8003e32:	50cd      	str	r5, [r1, r3]
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 f8d0 	bl	8003fda <__malloc_unlock>
 8003e3a:	f104 000b 	add.w	r0, r4, #11
 8003e3e:	1d23      	adds	r3, r4, #4
 8003e40:	f020 0007 	bic.w	r0, r0, #7
 8003e44:	1ac3      	subs	r3, r0, r3
 8003e46:	d0d3      	beq.n	8003df0 <_malloc_r+0x20>
 8003e48:	425a      	negs	r2, r3
 8003e4a:	50e2      	str	r2, [r4, r3]
 8003e4c:	e7d0      	b.n	8003df0 <_malloc_r+0x20>
 8003e4e:	684b      	ldr	r3, [r1, #4]
 8003e50:	428c      	cmp	r4, r1
 8003e52:	bf16      	itet	ne
 8003e54:	6063      	strne	r3, [r4, #4]
 8003e56:	6013      	streq	r3, [r2, #0]
 8003e58:	460c      	movne	r4, r1
 8003e5a:	e7eb      	b.n	8003e34 <_malloc_r+0x64>
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	6849      	ldr	r1, [r1, #4]
 8003e60:	e7cc      	b.n	8003dfc <_malloc_r+0x2c>
 8003e62:	1cc4      	adds	r4, r0, #3
 8003e64:	f024 0403 	bic.w	r4, r4, #3
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d005      	beq.n	8003e78 <_malloc_r+0xa8>
 8003e6c:	1a21      	subs	r1, r4, r0
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 f808 	bl	8003e84 <_sbrk_r>
 8003e74:	3001      	adds	r0, #1
 8003e76:	d0cf      	beq.n	8003e18 <_malloc_r+0x48>
 8003e78:	6025      	str	r5, [r4, #0]
 8003e7a:	e7db      	b.n	8003e34 <_malloc_r+0x64>
 8003e7c:	200029e4 	.word	0x200029e4
 8003e80:	200029e8 	.word	0x200029e8

08003e84 <_sbrk_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	2300      	movs	r3, #0
 8003e88:	4c05      	ldr	r4, [pc, #20]	; (8003ea0 <_sbrk_r+0x1c>)
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	f7ff fb98 	bl	80035c4 <_sbrk>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_sbrk_r+0x1a>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_sbrk_r+0x1a>
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20003128 	.word	0x20003128

08003ea4 <__sread>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eac:	f000 f896 	bl	8003fdc <_read_r>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	bfab      	itete	ge
 8003eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8003eb8:	181b      	addge	r3, r3, r0
 8003eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ebe:	bfac      	ite	ge
 8003ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ec2:	81a3      	strhlt	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__swrite>:
 8003ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eca:	461f      	mov	r7, r3
 8003ecc:	898b      	ldrh	r3, [r1, #12]
 8003ece:	4605      	mov	r5, r0
 8003ed0:	05db      	lsls	r3, r3, #23
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	d505      	bpl.n	8003ee4 <__swrite+0x1e>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	2200      	movs	r2, #0
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	f000 f868 	bl	8003fb4 <_lseek_r>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	f000 b817 	b.w	8003f2c <_write_r>

08003efe <__sseek>:
 8003efe:	b510      	push	{r4, lr}
 8003f00:	460c      	mov	r4, r1
 8003f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f06:	f000 f855 	bl	8003fb4 <_lseek_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	bf15      	itete	ne
 8003f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f1a:	81a3      	strheq	r3, [r4, #12]
 8003f1c:	bf18      	it	ne
 8003f1e:	81a3      	strhne	r3, [r4, #12]
 8003f20:	bd10      	pop	{r4, pc}

08003f22 <__sclose>:
 8003f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f26:	f000 b813 	b.w	8003f50 <_close_r>
	...

08003f2c <_write_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4605      	mov	r5, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	2200      	movs	r2, #0
 8003f36:	4c05      	ldr	r4, [pc, #20]	; (8003f4c <_write_r+0x20>)
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7ff faf5 	bl	800352a <_write>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_write_r+0x1e>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_write_r+0x1e>
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20003128 	.word	0x20003128

08003f50 <_close_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	2300      	movs	r3, #0
 8003f54:	4c05      	ldr	r4, [pc, #20]	; (8003f6c <_close_r+0x1c>)
 8003f56:	4605      	mov	r5, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	f7ff fb01 	bl	8003562 <_close>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_close_r+0x1a>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_close_r+0x1a>
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	20003128 	.word	0x20003128

08003f70 <_fstat_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	2300      	movs	r3, #0
 8003f74:	4c06      	ldr	r4, [pc, #24]	; (8003f90 <_fstat_r+0x20>)
 8003f76:	4605      	mov	r5, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	f7ff fafb 	bl	8003578 <_fstat>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	d102      	bne.n	8003f8c <_fstat_r+0x1c>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	b103      	cbz	r3, 8003f8c <_fstat_r+0x1c>
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	bd38      	pop	{r3, r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	20003128 	.word	0x20003128

08003f94 <_isatty_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	2300      	movs	r3, #0
 8003f98:	4c05      	ldr	r4, [pc, #20]	; (8003fb0 <_isatty_r+0x1c>)
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	f7ff faf9 	bl	8003596 <_isatty>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <_isatty_r+0x1a>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	b103      	cbz	r3, 8003fae <_isatty_r+0x1a>
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	20003128 	.word	0x20003128

08003fb4 <_lseek_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4c05      	ldr	r4, [pc, #20]	; (8003fd4 <_lseek_r+0x20>)
 8003fc0:	6022      	str	r2, [r4, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7ff faf1 	bl	80035aa <_lseek>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_lseek_r+0x1e>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_lseek_r+0x1e>
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20003128 	.word	0x20003128

08003fd8 <__malloc_lock>:
 8003fd8:	4770      	bx	lr

08003fda <__malloc_unlock>:
 8003fda:	4770      	bx	lr

08003fdc <_read_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4605      	mov	r5, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4c05      	ldr	r4, [pc, #20]	; (8003ffc <_read_r+0x20>)
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7ff fa80 	bl	80034f0 <_read>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_read_r+0x1e>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_read_r+0x1e>
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20003128 	.word	0x20003128

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr
